
// -*-c++-*-
//-------------------------------------------------------------------------
//   Copyright 2002-2019 National Technology & Engineering Solutions of
//   Sandia, LLC (NTESS).  Under the terms of Contract DE-NA0003525 with
//   NTESS, the U.S. Government retains certain rights in this software.
//
//   This file is part of the Xyce(TM) Parallel Electrical Simulator.
//
//   Xyce(TM) is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   Xyce(TM) is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with Xyce(TM).
//   If not, see <http://www.gnu.org/licenses/>.
//-------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
// Purpose        :
//
// Special Notes  : Generated from verilog file vbic_1p3.va with ADMS
//                  interface for Xyce 6.12.0
//                  DO NOT EDIT THIS FILE DIRECTLY!  It may be overwritten!
//
// Creator        : admsXml-2.3.6
//
// Creation Date  : Wed, 17 Apr 2019 15:00:13
//
//-----------------------------------------------------------------------------
#ifndef Xyce_N_DEV_ADMSvbic13_h
#define Xyce_N_DEV_ADMSvbic13_h


#include <Sacado.hpp>

#include <N_DEV_Configuration.h>
#include <N_DEV_Const.h>
#include <N_DEV_DeviceBlock.h>
#include <N_DEV_DeviceInstance.h>
#include <N_DEV_DeviceModel.h>
#include <N_DEV_BJT.h>


namespace Xyce {
namespace Device {
namespace ADMSvbic13 {

// This typedef is for our automatic differentiation:
typedef Sacado::Fad::SFad<double,18> AdmsFadType;
typedef Sacado::Fad::SFad<double,1> AdmsSensFadType;

class Model;
class Instance;
class InstanceSensitivity;

#ifdef Xyce_ADMS_SENSITIVITIES
//-----------------------------------------------------------------------------
// Class         : InstanceSensitivity
//
// Purpose       : This class is a functor for sensitivity
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class InstanceSensitivity : public baseSensitivity
{
public:
  InstanceSensitivity() :
    baseSensitivity() {};

  virtual ~InstanceSensitivity() {};

  virtual void operator()(
     const ParameterBase &entity,
     const std::string &param,
     std::vector<double> & dfdp,
     std::vector<double> & dqdp,
     std::vector<double> & dbdp,
     std::vector<int> & Findices,
     std::vector<int> & Qindices,
     std::vector<int> & Bindices
                          ) const ;
};

static InstanceSensitivity instSens;


//-----------------------------------------------------------------------------
// Class         : ModelSensitivity
//
// Purpose       : This class is a functor for sensitivity
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class ModelSensitivity : public baseSensitivity
{
public:
  ModelSensitivity() :
    baseSensitivity() {};

  virtual ~ModelSensitivity() {};

  virtual void operator()(
     const ParameterBase &entity,
     const std::string &param,
     std::vector<double> & dfdp,
     std::vector<double> & dqdp,
     std::vector<double> & dbdp,
     std::vector<int> & Findices,
     std::vector<int> & Qindices,
     std::vector<int> & Bindices
                          ) const ;
};

static ModelSensitivity modSens;
#endif // Xyce_ADMS_SENSITIVITIES

// general purpose free functions
// thermal voltage at kelvin temperature temp)
template <typename T> static inline T adms_vt(const T temp) {return(CONSTKoverQ*temp);};

// Figure out how to template this shiznit!
//-----------------------------------------------------------------------------


template<typename Tin>
static Tin adms_ternary_op(const bool cond, const Tin &ifTrue, const Tin &ifFalse)
{
  if (cond)
    return ifTrue;
  else
    return ifFalse;
}

template<typename Tin>
static Tin adms_ternary_op(const bool cond, const Tin &ifTrue, const double &ifFalse)
{
  if (cond)
    return ifTrue;
  else
    return Tin(ifFalse);
}

template<typename Tin>
static Tin adms_ternary_op(const bool cond, const double &ifTrue, const Tin &ifFalse)
{
  if (cond)
    return Tin(ifTrue);
  else
    return ifFalse;
}




#ifdef Xyce_ADMS_SENSITIVITIES
//-----------------------------------------------------------------------------
// Free functions used by sensitivity
//
//-----------------------------------------------------------------------------
void evaluateModelEquations(
   std::vector <double> & probeVars,
   // probe constants
   const int admsProbeID_V_xf2_GND,
   const int admsProbeID_V_xf1_GND,
   const int admsProbeID_V_bp_cx,
   const int admsProbeID_V_e_ei,
   const int admsProbeID_V_bx_bi,
   const int admsProbeID_V_b_bx,
   const int admsProbeID_V_cx_ci,
   const int admsProbeID_V_c_cx,
   const int admsProbeID_V_b_c,
   const int admsProbeID_V_b_e,
   const int admsProbeID_V_bx_bp,
   const int admsProbeID_V_ci_ei,
   const int admsProbeID_V_bx_cx,
   const int admsProbeID_V_bi_cx,
   const int admsProbeID_V_bi_ci,
   const int admsProbeID_V_bx_ei,
   const int admsProbeID_V_bi_ei,
   const int admsProbeID_Temp_dt_GND,
   // node constants
   const int admsNodeID_c,
   const int admsNodeID_b,
   const int admsNodeID_e,
   const int admsNodeID_dt,
   const int admsNodeID_cx,
   const int admsNodeID_ci,
   const int admsNodeID_bx,
   const int admsNodeID_bi,
   const int admsNodeID_ei,
   const int admsNodeID_bp,
   const int admsNodeID_xf1,
   const int admsNodeID_xf2,
   // instance parameters
   // reals
   AdmsSensFadType & instancePar_m,
   bool instancePar_given_m,
   AdmsSensFadType & instancePar_trise,
   bool instancePar_given_trise,
   // non-reals(including hidden)
   int instancePar_sw_noise,
   bool instancePar_given_sw_noise,
   int instancePar_sw_et,
   bool instancePar_given_sw_et,
   // instance variables
   // reals
   AdmsSensFadType & instanceVar_is_t,
   AdmsSensFadType & instanceVar_isrr_t,
   AdmsSensFadType & instanceVar_ibei_t,
   AdmsSensFadType & instanceVar_ibci_t,
   AdmsSensFadType & instanceVar_isp_t,
   AdmsSensFadType & instanceVar_iben_t,
   AdmsSensFadType & instanceVar_ibcn_t,
   AdmsSensFadType & instanceVar_ibeip_t,
   AdmsSensFadType & instanceVar_ibenp_t,
   AdmsSensFadType & instanceVar_ibcip_t,
   AdmsSensFadType & instanceVar_ibcnp_t,
   AdmsSensFadType & instanceVar_tdevC,
   AdmsSensFadType & instanceVar_tdevK,
   AdmsSensFadType & instanceVar_rT,
   AdmsSensFadType & instanceVar_Gcx,
   AdmsSensFadType & instanceVar_Gci,
   AdmsSensFadType & instanceVar_Gbx,
   AdmsSensFadType & instanceVar_Gbi,
   AdmsSensFadType & instanceVar_Ge,
   AdmsSensFadType & instanceVar_Gbp,
   AdmsSensFadType & instanceVar_maxvIfi,
   AdmsSensFadType & instanceVar_maxvIri,
   AdmsSensFadType & instanceVar_maxvIp,
   AdmsSensFadType & instanceVar_maxvIbbe,
   AdmsSensFadType & instanceVar_maxvIbei,
   AdmsSensFadType & instanceVar_maxvIben,
   AdmsSensFadType & instanceVar_maxvIbci,
   AdmsSensFadType & instanceVar_maxvIbcn,
   AdmsSensFadType & instanceVar_maxvIbeip,
   AdmsSensFadType & instanceVar_maxvIbenp,
   AdmsSensFadType & instanceVar_vtv,
   AdmsSensFadType & instanceVar_Itzf,
   AdmsSensFadType & instanceVar_qb,
   AdmsSensFadType & instanceVar_qbp,
   AdmsSensFadType & instanceVar_Ibe,
   AdmsSensFadType & instanceVar_Ibex,
   AdmsSensFadType & instanceVar_Ibep,
   AdmsSensFadType & instanceVar_Irci,
   AdmsSensFadType & instanceVar_Vrci,
   AdmsSensFadType & instanceVar_mMod,
   AdmsSensFadType & instanceVar_tVCrit,
   // model parameters
   // reals
   AdmsSensFadType & modelPar_npn,
   bool modelPar_given_npn,
   AdmsSensFadType & modelPar_pnp,
   bool modelPar_given_pnp,
   AdmsSensFadType & modelPar_scale,
   bool modelPar_given_scale,
   AdmsSensFadType & modelPar_shrink,
   bool modelPar_given_shrink,
   AdmsSensFadType & modelPar_tmin,
   bool modelPar_given_tmin,
   AdmsSensFadType & modelPar_tmax,
   bool modelPar_given_tmax,
   AdmsSensFadType & modelPar_gmin,
   bool modelPar_given_gmin,
   AdmsSensFadType & modelPar_pnjmaxi,
   bool modelPar_given_pnjmaxi,
   AdmsSensFadType & modelPar_maxexp,
   bool modelPar_given_maxexp,
   AdmsSensFadType & modelPar_tnom,
   bool modelPar_given_tnom,
   AdmsSensFadType & modelPar_tminclip,
   bool modelPar_given_tminclip,
   AdmsSensFadType & modelPar_tmaxclip,
   bool modelPar_given_tmaxclip,
   AdmsSensFadType & modelPar_rcx,
   bool modelPar_given_rcx,
   AdmsSensFadType & modelPar_rci,
   bool modelPar_given_rci,
   AdmsSensFadType & modelPar_vo,
   bool modelPar_given_vo,
   AdmsSensFadType & modelPar_gamm,
   bool modelPar_given_gamm,
   AdmsSensFadType & modelPar_hrcf,
   bool modelPar_given_hrcf,
   AdmsSensFadType & modelPar_rbx,
   bool modelPar_given_rbx,
   AdmsSensFadType & modelPar_rbi,
   bool modelPar_given_rbi,
   AdmsSensFadType & modelPar_re,
   bool modelPar_given_re,
   AdmsSensFadType & modelPar_rs,
   bool modelPar_given_rs,
   AdmsSensFadType & modelPar_rbp,
   bool modelPar_given_rbp,
   AdmsSensFadType & modelPar_is,
   bool modelPar_given_is,
   AdmsSensFadType & modelPar_isrr,
   bool modelPar_given_isrr,
   AdmsSensFadType & modelPar_nf,
   bool modelPar_given_nf,
   AdmsSensFadType & modelPar_nr,
   bool modelPar_given_nr,
   AdmsSensFadType & modelPar_isp,
   bool modelPar_given_isp,
   AdmsSensFadType & modelPar_wsp,
   bool modelPar_given_wsp,
   AdmsSensFadType & modelPar_nfp,
   bool modelPar_given_nfp,
   AdmsSensFadType & modelPar_fc,
   bool modelPar_given_fc,
   AdmsSensFadType & modelPar_cbeo,
   bool modelPar_given_cbeo,
   AdmsSensFadType & modelPar_cje,
   bool modelPar_given_cje,
   AdmsSensFadType & modelPar_pe,
   bool modelPar_given_pe,
   AdmsSensFadType & modelPar_me,
   bool modelPar_given_me,
   AdmsSensFadType & modelPar_aje,
   bool modelPar_given_aje,
   AdmsSensFadType & modelPar_cbco,
   bool modelPar_given_cbco,
   AdmsSensFadType & modelPar_cjc,
   bool modelPar_given_cjc,
   AdmsSensFadType & modelPar_pc,
   bool modelPar_given_pc,
   AdmsSensFadType & modelPar_mc,
   bool modelPar_given_mc,
   AdmsSensFadType & modelPar_ajc,
   bool modelPar_given_ajc,
   AdmsSensFadType & modelPar_vrt,
   bool modelPar_given_vrt,
   AdmsSensFadType & modelPar_art,
   bool modelPar_given_art,
   AdmsSensFadType & modelPar_qco,
   bool modelPar_given_qco,
   AdmsSensFadType & modelPar_cjep,
   bool modelPar_given_cjep,
   AdmsSensFadType & modelPar_cjcp,
   bool modelPar_given_cjcp,
   AdmsSensFadType & modelPar_ps,
   bool modelPar_given_ps,
   AdmsSensFadType & modelPar_ms,
   bool modelPar_given_ms,
   AdmsSensFadType & modelPar_ajs,
   bool modelPar_given_ajs,
   AdmsSensFadType & modelPar_ccso,
   bool modelPar_given_ccso,
   AdmsSensFadType & modelPar_ibei,
   bool modelPar_given_ibei,
   AdmsSensFadType & modelPar_wbe,
   bool modelPar_given_wbe,
   AdmsSensFadType & modelPar_nei,
   bool modelPar_given_nei,
   AdmsSensFadType & modelPar_qnibeir,
   bool modelPar_given_qnibeir,
   AdmsSensFadType & modelPar_iben,
   bool modelPar_given_iben,
   AdmsSensFadType & modelPar_nen,
   bool modelPar_given_nen,
   AdmsSensFadType & modelPar_ibci,
   bool modelPar_given_ibci,
   AdmsSensFadType & modelPar_nci,
   bool modelPar_given_nci,
   AdmsSensFadType & modelPar_ibcn,
   bool modelPar_given_ibcn,
   AdmsSensFadType & modelPar_ncn,
   bool modelPar_given_ncn,
   AdmsSensFadType & modelPar_ibeip,
   bool modelPar_given_ibeip,
   AdmsSensFadType & modelPar_ibenp,
   bool modelPar_given_ibenp,
   AdmsSensFadType & modelPar_ibcip,
   bool modelPar_given_ibcip,
   AdmsSensFadType & modelPar_ncip,
   bool modelPar_given_ncip,
   AdmsSensFadType & modelPar_ibcnp,
   bool modelPar_given_ibcnp,
   AdmsSensFadType & modelPar_ncnp,
   bool modelPar_given_ncnp,
   AdmsSensFadType & modelPar_vef,
   bool modelPar_given_vef,
   AdmsSensFadType & modelPar_ver,
   bool modelPar_given_ver,
   AdmsSensFadType & modelPar_ikf,
   bool modelPar_given_ikf,
   AdmsSensFadType & modelPar_nkf,
   bool modelPar_given_nkf,
   AdmsSensFadType & modelPar_ikr,
   bool modelPar_given_ikr,
   AdmsSensFadType & modelPar_ikp,
   bool modelPar_given_ikp,
   AdmsSensFadType & modelPar_tf,
   bool modelPar_given_tf,
   AdmsSensFadType & modelPar_qtf,
   bool modelPar_given_qtf,
   AdmsSensFadType & modelPar_xtf,
   bool modelPar_given_xtf,
   AdmsSensFadType & modelPar_vtf,
   bool modelPar_given_vtf,
   AdmsSensFadType & modelPar_itf,
   bool modelPar_given_itf,
   AdmsSensFadType & modelPar_tr,
   bool modelPar_given_tr,
   AdmsSensFadType & modelPar_td,
   bool modelPar_given_td,
   AdmsSensFadType & modelPar_avc1,
   bool modelPar_given_avc1,
   AdmsSensFadType & modelPar_avc2,
   bool modelPar_given_avc2,
   AdmsSensFadType & modelPar_avcx1,
   bool modelPar_given_avcx1,
   AdmsSensFadType & modelPar_avcx2,
   bool modelPar_given_avcx2,
   AdmsSensFadType & modelPar_mcx,
   bool modelPar_given_mcx,
   AdmsSensFadType & modelPar_vbbe,
   bool modelPar_given_vbbe,
   AdmsSensFadType & modelPar_nbbe,
   bool modelPar_given_nbbe,
   AdmsSensFadType & modelPar_ibbe,
   bool modelPar_given_ibbe,
   AdmsSensFadType & modelPar_tvbbe1,
   bool modelPar_given_tvbbe1,
   AdmsSensFadType & modelPar_tvbbe2,
   bool modelPar_given_tvbbe2,
   AdmsSensFadType & modelPar_tnbbe,
   bool modelPar_given_tnbbe,
   AdmsSensFadType & modelPar_vpte,
   bool modelPar_given_vpte,
   AdmsSensFadType & modelPar_ibk0,
   bool modelPar_given_ibk0,
   AdmsSensFadType & modelPar_abk,
   bool modelPar_given_abk,
   AdmsSensFadType & modelPar_bbk,
   bool modelPar_given_bbk,
   AdmsSensFadType & modelPar_kfn,
   bool modelPar_given_kfn,
   AdmsSensFadType & modelPar_afn,
   bool modelPar_given_afn,
   AdmsSensFadType & modelPar_bfn,
   bool modelPar_given_bfn,
   AdmsSensFadType & modelPar_rth,
   bool modelPar_given_rth,
   AdmsSensFadType & modelPar_cth,
   bool modelPar_given_cth,
   AdmsSensFadType & modelPar_xre,
   bool modelPar_given_xre,
   AdmsSensFadType & modelPar_xrb,
   bool modelPar_given_xrb,
   AdmsSensFadType & modelPar_xrbi,
   bool modelPar_given_xrbi,
   AdmsSensFadType & modelPar_xrbx,
   bool modelPar_given_xrbx,
   AdmsSensFadType & modelPar_xrc,
   bool modelPar_given_xrc,
   AdmsSensFadType & modelPar_xrci,
   bool modelPar_given_xrci,
   AdmsSensFadType & modelPar_xrcx,
   bool modelPar_given_xrcx,
   AdmsSensFadType & modelPar_xrbp,
   bool modelPar_given_xrbp,
   AdmsSensFadType & modelPar_xrs,
   bool modelPar_given_xrs,
   AdmsSensFadType & modelPar_xvo,
   bool modelPar_given_xvo,
   AdmsSensFadType & modelPar_ea,
   bool modelPar_given_ea,
   AdmsSensFadType & modelPar_eaie,
   bool modelPar_given_eaie,
   AdmsSensFadType & modelPar_eaic,
   bool modelPar_given_eaic,
   AdmsSensFadType & modelPar_eais,
   bool modelPar_given_eais,
   AdmsSensFadType & modelPar_eane,
   bool modelPar_given_eane,
   AdmsSensFadType & modelPar_eanc,
   bool modelPar_given_eanc,
   AdmsSensFadType & modelPar_eans,
   bool modelPar_given_eans,
   AdmsSensFadType & modelPar_eap,
   bool modelPar_given_eap,
   AdmsSensFadType & modelPar_dear,
   bool modelPar_given_dear,
   AdmsSensFadType & modelPar_xis,
   bool modelPar_given_xis,
   AdmsSensFadType & modelPar_xii,
   bool modelPar_given_xii,
   AdmsSensFadType & modelPar_xin,
   bool modelPar_given_xin,
   AdmsSensFadType & modelPar_xisr,
   bool modelPar_given_xisr,
   AdmsSensFadType & modelPar_xikf,
   bool modelPar_given_xikf,
   AdmsSensFadType & modelPar_tavc,
   bool modelPar_given_tavc,
   AdmsSensFadType & modelPar_tavcx,
   bool modelPar_given_tavcx,
   AdmsSensFadType & modelPar_tnf,
   bool modelPar_given_tnf,
   AdmsSensFadType & modelPar_tcvef,
   bool modelPar_given_tcvef,
   AdmsSensFadType & modelPar_tcver,
   bool modelPar_given_tcver,
   AdmsSensFadType & modelPar_tcrth,
   bool modelPar_given_tcrth,
   // non-reals (including hidden)
   int modelPar_type,
   bool modelPar_given_type,
   int modelPar_VBICtype,
   int modelPar_qbm,
   bool modelPar_given_qbm// model variables
   ,
   // reals
   AdmsSensFadType & modelVar_tiniK,
   AdmsSensFadType & modelVar_Iikr,
   AdmsSensFadType & modelVar_Iikp,
   AdmsSensFadType & modelVar_Ihrcf,
   AdmsSensFadType & modelVar_Ivtf,
   AdmsSensFadType & modelVar_Iitf,
   AdmsSensFadType & modelVar_sltf,
   AdmsSensFadType & modelVar_VmaxExp,
   AdmsSensFadType & modelVar_gminMod,
   AdmsSensFadType & modelVar_imaxMod,
   // basic variables
   double admsTemperature, double adms_vt_nom, double ADMSgmin_arg, std::vector <AdmsSensFadType> & staticContributions, std::vector <AdmsSensFadType> & dynamicContributions, const Instance & theInstance);

void evaluateInitialInstance(
   // instance parameters
   // reals
   AdmsSensFadType & instancePar_m,
   bool instancePar_given_m,
   AdmsSensFadType & instancePar_trise,
   bool instancePar_given_trise,
   // non-reals(including hidden)
   int instancePar_sw_noise,
   bool instancePar_given_sw_noise,
   int instancePar_sw_et,
   bool instancePar_given_sw_et,
   // instance variables
   // reals
   AdmsSensFadType & instanceVar_is_t,
   AdmsSensFadType & instanceVar_isrr_t,
   AdmsSensFadType & instanceVar_ibei_t,
   AdmsSensFadType & instanceVar_ibci_t,
   AdmsSensFadType & instanceVar_isp_t,
   AdmsSensFadType & instanceVar_iben_t,
   AdmsSensFadType & instanceVar_ibcn_t,
   AdmsSensFadType & instanceVar_ibeip_t,
   AdmsSensFadType & instanceVar_ibenp_t,
   AdmsSensFadType & instanceVar_ibcip_t,
   AdmsSensFadType & instanceVar_ibcnp_t,
   AdmsSensFadType & instanceVar_tdevC,
   AdmsSensFadType & instanceVar_tdevK,
   AdmsSensFadType & instanceVar_rT,
   AdmsSensFadType & instanceVar_Gcx,
   AdmsSensFadType & instanceVar_Gci,
   AdmsSensFadType & instanceVar_Gbx,
   AdmsSensFadType & instanceVar_Gbi,
   AdmsSensFadType & instanceVar_Ge,
   AdmsSensFadType & instanceVar_Gbp,
   AdmsSensFadType & instanceVar_maxvIfi,
   AdmsSensFadType & instanceVar_maxvIri,
   AdmsSensFadType & instanceVar_maxvIp,
   AdmsSensFadType & instanceVar_maxvIbbe,
   AdmsSensFadType & instanceVar_maxvIbei,
   AdmsSensFadType & instanceVar_maxvIben,
   AdmsSensFadType & instanceVar_maxvIbci,
   AdmsSensFadType & instanceVar_maxvIbcn,
   AdmsSensFadType & instanceVar_maxvIbeip,
   AdmsSensFadType & instanceVar_maxvIbenp,
   AdmsSensFadType & instanceVar_vtv,
   AdmsSensFadType & instanceVar_Itzf,
   AdmsSensFadType & instanceVar_qb,
   AdmsSensFadType & instanceVar_qbp,
   AdmsSensFadType & instanceVar_Ibe,
   AdmsSensFadType & instanceVar_Ibex,
   AdmsSensFadType & instanceVar_Ibep,
   AdmsSensFadType & instanceVar_Irci,
   AdmsSensFadType & instanceVar_Vrci,
   AdmsSensFadType & instanceVar_mMod,
   AdmsSensFadType & instanceVar_tVCrit,
   // model parameters
   // reals
   AdmsSensFadType & modelPar_npn,
   bool modelPar_given_npn,
   AdmsSensFadType & modelPar_pnp,
   bool modelPar_given_pnp,
   AdmsSensFadType & modelPar_scale,
   bool modelPar_given_scale,
   AdmsSensFadType & modelPar_shrink,
   bool modelPar_given_shrink,
   AdmsSensFadType & modelPar_tmin,
   bool modelPar_given_tmin,
   AdmsSensFadType & modelPar_tmax,
   bool modelPar_given_tmax,
   AdmsSensFadType & modelPar_gmin,
   bool modelPar_given_gmin,
   AdmsSensFadType & modelPar_pnjmaxi,
   bool modelPar_given_pnjmaxi,
   AdmsSensFadType & modelPar_maxexp,
   bool modelPar_given_maxexp,
   AdmsSensFadType & modelPar_tnom,
   bool modelPar_given_tnom,
   AdmsSensFadType & modelPar_tminclip,
   bool modelPar_given_tminclip,
   AdmsSensFadType & modelPar_tmaxclip,
   bool modelPar_given_tmaxclip,
   AdmsSensFadType & modelPar_rcx,
   bool modelPar_given_rcx,
   AdmsSensFadType & modelPar_rci,
   bool modelPar_given_rci,
   AdmsSensFadType & modelPar_vo,
   bool modelPar_given_vo,
   AdmsSensFadType & modelPar_gamm,
   bool modelPar_given_gamm,
   AdmsSensFadType & modelPar_hrcf,
   bool modelPar_given_hrcf,
   AdmsSensFadType & modelPar_rbx,
   bool modelPar_given_rbx,
   AdmsSensFadType & modelPar_rbi,
   bool modelPar_given_rbi,
   AdmsSensFadType & modelPar_re,
   bool modelPar_given_re,
   AdmsSensFadType & modelPar_rs,
   bool modelPar_given_rs,
   AdmsSensFadType & modelPar_rbp,
   bool modelPar_given_rbp,
   AdmsSensFadType & modelPar_is,
   bool modelPar_given_is,
   AdmsSensFadType & modelPar_isrr,
   bool modelPar_given_isrr,
   AdmsSensFadType & modelPar_nf,
   bool modelPar_given_nf,
   AdmsSensFadType & modelPar_nr,
   bool modelPar_given_nr,
   AdmsSensFadType & modelPar_isp,
   bool modelPar_given_isp,
   AdmsSensFadType & modelPar_wsp,
   bool modelPar_given_wsp,
   AdmsSensFadType & modelPar_nfp,
   bool modelPar_given_nfp,
   AdmsSensFadType & modelPar_fc,
   bool modelPar_given_fc,
   AdmsSensFadType & modelPar_cbeo,
   bool modelPar_given_cbeo,
   AdmsSensFadType & modelPar_cje,
   bool modelPar_given_cje,
   AdmsSensFadType & modelPar_pe,
   bool modelPar_given_pe,
   AdmsSensFadType & modelPar_me,
   bool modelPar_given_me,
   AdmsSensFadType & modelPar_aje,
   bool modelPar_given_aje,
   AdmsSensFadType & modelPar_cbco,
   bool modelPar_given_cbco,
   AdmsSensFadType & modelPar_cjc,
   bool modelPar_given_cjc,
   AdmsSensFadType & modelPar_pc,
   bool modelPar_given_pc,
   AdmsSensFadType & modelPar_mc,
   bool modelPar_given_mc,
   AdmsSensFadType & modelPar_ajc,
   bool modelPar_given_ajc,
   AdmsSensFadType & modelPar_vrt,
   bool modelPar_given_vrt,
   AdmsSensFadType & modelPar_art,
   bool modelPar_given_art,
   AdmsSensFadType & modelPar_qco,
   bool modelPar_given_qco,
   AdmsSensFadType & modelPar_cjep,
   bool modelPar_given_cjep,
   AdmsSensFadType & modelPar_cjcp,
   bool modelPar_given_cjcp,
   AdmsSensFadType & modelPar_ps,
   bool modelPar_given_ps,
   AdmsSensFadType & modelPar_ms,
   bool modelPar_given_ms,
   AdmsSensFadType & modelPar_ajs,
   bool modelPar_given_ajs,
   AdmsSensFadType & modelPar_ccso,
   bool modelPar_given_ccso,
   AdmsSensFadType & modelPar_ibei,
   bool modelPar_given_ibei,
   AdmsSensFadType & modelPar_wbe,
   bool modelPar_given_wbe,
   AdmsSensFadType & modelPar_nei,
   bool modelPar_given_nei,
   AdmsSensFadType & modelPar_qnibeir,
   bool modelPar_given_qnibeir,
   AdmsSensFadType & modelPar_iben,
   bool modelPar_given_iben,
   AdmsSensFadType & modelPar_nen,
   bool modelPar_given_nen,
   AdmsSensFadType & modelPar_ibci,
   bool modelPar_given_ibci,
   AdmsSensFadType & modelPar_nci,
   bool modelPar_given_nci,
   AdmsSensFadType & modelPar_ibcn,
   bool modelPar_given_ibcn,
   AdmsSensFadType & modelPar_ncn,
   bool modelPar_given_ncn,
   AdmsSensFadType & modelPar_ibeip,
   bool modelPar_given_ibeip,
   AdmsSensFadType & modelPar_ibenp,
   bool modelPar_given_ibenp,
   AdmsSensFadType & modelPar_ibcip,
   bool modelPar_given_ibcip,
   AdmsSensFadType & modelPar_ncip,
   bool modelPar_given_ncip,
   AdmsSensFadType & modelPar_ibcnp,
   bool modelPar_given_ibcnp,
   AdmsSensFadType & modelPar_ncnp,
   bool modelPar_given_ncnp,
   AdmsSensFadType & modelPar_vef,
   bool modelPar_given_vef,
   AdmsSensFadType & modelPar_ver,
   bool modelPar_given_ver,
   AdmsSensFadType & modelPar_ikf,
   bool modelPar_given_ikf,
   AdmsSensFadType & modelPar_nkf,
   bool modelPar_given_nkf,
   AdmsSensFadType & modelPar_ikr,
   bool modelPar_given_ikr,
   AdmsSensFadType & modelPar_ikp,
   bool modelPar_given_ikp,
   AdmsSensFadType & modelPar_tf,
   bool modelPar_given_tf,
   AdmsSensFadType & modelPar_qtf,
   bool modelPar_given_qtf,
   AdmsSensFadType & modelPar_xtf,
   bool modelPar_given_xtf,
   AdmsSensFadType & modelPar_vtf,
   bool modelPar_given_vtf,
   AdmsSensFadType & modelPar_itf,
   bool modelPar_given_itf,
   AdmsSensFadType & modelPar_tr,
   bool modelPar_given_tr,
   AdmsSensFadType & modelPar_td,
   bool modelPar_given_td,
   AdmsSensFadType & modelPar_avc1,
   bool modelPar_given_avc1,
   AdmsSensFadType & modelPar_avc2,
   bool modelPar_given_avc2,
   AdmsSensFadType & modelPar_avcx1,
   bool modelPar_given_avcx1,
   AdmsSensFadType & modelPar_avcx2,
   bool modelPar_given_avcx2,
   AdmsSensFadType & modelPar_mcx,
   bool modelPar_given_mcx,
   AdmsSensFadType & modelPar_vbbe,
   bool modelPar_given_vbbe,
   AdmsSensFadType & modelPar_nbbe,
   bool modelPar_given_nbbe,
   AdmsSensFadType & modelPar_ibbe,
   bool modelPar_given_ibbe,
   AdmsSensFadType & modelPar_tvbbe1,
   bool modelPar_given_tvbbe1,
   AdmsSensFadType & modelPar_tvbbe2,
   bool modelPar_given_tvbbe2,
   AdmsSensFadType & modelPar_tnbbe,
   bool modelPar_given_tnbbe,
   AdmsSensFadType & modelPar_vpte,
   bool modelPar_given_vpte,
   AdmsSensFadType & modelPar_ibk0,
   bool modelPar_given_ibk0,
   AdmsSensFadType & modelPar_abk,
   bool modelPar_given_abk,
   AdmsSensFadType & modelPar_bbk,
   bool modelPar_given_bbk,
   AdmsSensFadType & modelPar_kfn,
   bool modelPar_given_kfn,
   AdmsSensFadType & modelPar_afn,
   bool modelPar_given_afn,
   AdmsSensFadType & modelPar_bfn,
   bool modelPar_given_bfn,
   AdmsSensFadType & modelPar_rth,
   bool modelPar_given_rth,
   AdmsSensFadType & modelPar_cth,
   bool modelPar_given_cth,
   AdmsSensFadType & modelPar_xre,
   bool modelPar_given_xre,
   AdmsSensFadType & modelPar_xrb,
   bool modelPar_given_xrb,
   AdmsSensFadType & modelPar_xrbi,
   bool modelPar_given_xrbi,
   AdmsSensFadType & modelPar_xrbx,
   bool modelPar_given_xrbx,
   AdmsSensFadType & modelPar_xrc,
   bool modelPar_given_xrc,
   AdmsSensFadType & modelPar_xrci,
   bool modelPar_given_xrci,
   AdmsSensFadType & modelPar_xrcx,
   bool modelPar_given_xrcx,
   AdmsSensFadType & modelPar_xrbp,
   bool modelPar_given_xrbp,
   AdmsSensFadType & modelPar_xrs,
   bool modelPar_given_xrs,
   AdmsSensFadType & modelPar_xvo,
   bool modelPar_given_xvo,
   AdmsSensFadType & modelPar_ea,
   bool modelPar_given_ea,
   AdmsSensFadType & modelPar_eaie,
   bool modelPar_given_eaie,
   AdmsSensFadType & modelPar_eaic,
   bool modelPar_given_eaic,
   AdmsSensFadType & modelPar_eais,
   bool modelPar_given_eais,
   AdmsSensFadType & modelPar_eane,
   bool modelPar_given_eane,
   AdmsSensFadType & modelPar_eanc,
   bool modelPar_given_eanc,
   AdmsSensFadType & modelPar_eans,
   bool modelPar_given_eans,
   AdmsSensFadType & modelPar_eap,
   bool modelPar_given_eap,
   AdmsSensFadType & modelPar_dear,
   bool modelPar_given_dear,
   AdmsSensFadType & modelPar_xis,
   bool modelPar_given_xis,
   AdmsSensFadType & modelPar_xii,
   bool modelPar_given_xii,
   AdmsSensFadType & modelPar_xin,
   bool modelPar_given_xin,
   AdmsSensFadType & modelPar_xisr,
   bool modelPar_given_xisr,
   AdmsSensFadType & modelPar_xikf,
   bool modelPar_given_xikf,
   AdmsSensFadType & modelPar_tavc,
   bool modelPar_given_tavc,
   AdmsSensFadType & modelPar_tavcx,
   bool modelPar_given_tavcx,
   AdmsSensFadType & modelPar_tnf,
   bool modelPar_given_tnf,
   AdmsSensFadType & modelPar_tcvef,
   bool modelPar_given_tcvef,
   AdmsSensFadType & modelPar_tcver,
   bool modelPar_given_tcver,
   AdmsSensFadType & modelPar_tcrth,
   bool modelPar_given_tcrth,
   // non-reals (including hidden)
   int modelPar_type,
   bool modelPar_given_type,
   int modelPar_VBICtype,
   int modelPar_qbm,
   bool modelPar_given_qbm// model variables
   ,
   // reals
   AdmsSensFadType & modelVar_tiniK,
   AdmsSensFadType & modelVar_Iikr,
   AdmsSensFadType & modelVar_Iikp,
   AdmsSensFadType & modelVar_Ihrcf,
   AdmsSensFadType & modelVar_Ivtf,
   AdmsSensFadType & modelVar_Iitf,
   AdmsSensFadType & modelVar_sltf,
   AdmsSensFadType & modelVar_VmaxExp,
   AdmsSensFadType & modelVar_gminMod,
   AdmsSensFadType & modelVar_imaxMod,
   double admsTemperature,double adms_vt_nom, double ADMSgmin_arg, const Instance & theInstance);

void evaluateInitialModel(
   // model parameters
   // reals
   AdmsSensFadType & modelPar_npn,
   bool modelPar_given_npn,
   AdmsSensFadType & modelPar_pnp,
   bool modelPar_given_pnp,
   AdmsSensFadType & modelPar_scale,
   bool modelPar_given_scale,
   AdmsSensFadType & modelPar_shrink,
   bool modelPar_given_shrink,
   AdmsSensFadType & modelPar_tmin,
   bool modelPar_given_tmin,
   AdmsSensFadType & modelPar_tmax,
   bool modelPar_given_tmax,
   AdmsSensFadType & modelPar_gmin,
   bool modelPar_given_gmin,
   AdmsSensFadType & modelPar_pnjmaxi,
   bool modelPar_given_pnjmaxi,
   AdmsSensFadType & modelPar_maxexp,
   bool modelPar_given_maxexp,
   AdmsSensFadType & modelPar_tnom,
   bool modelPar_given_tnom,
   AdmsSensFadType & modelPar_tminclip,
   bool modelPar_given_tminclip,
   AdmsSensFadType & modelPar_tmaxclip,
   bool modelPar_given_tmaxclip,
   AdmsSensFadType & modelPar_rcx,
   bool modelPar_given_rcx,
   AdmsSensFadType & modelPar_rci,
   bool modelPar_given_rci,
   AdmsSensFadType & modelPar_vo,
   bool modelPar_given_vo,
   AdmsSensFadType & modelPar_gamm,
   bool modelPar_given_gamm,
   AdmsSensFadType & modelPar_hrcf,
   bool modelPar_given_hrcf,
   AdmsSensFadType & modelPar_rbx,
   bool modelPar_given_rbx,
   AdmsSensFadType & modelPar_rbi,
   bool modelPar_given_rbi,
   AdmsSensFadType & modelPar_re,
   bool modelPar_given_re,
   AdmsSensFadType & modelPar_rs,
   bool modelPar_given_rs,
   AdmsSensFadType & modelPar_rbp,
   bool modelPar_given_rbp,
   AdmsSensFadType & modelPar_is,
   bool modelPar_given_is,
   AdmsSensFadType & modelPar_isrr,
   bool modelPar_given_isrr,
   AdmsSensFadType & modelPar_nf,
   bool modelPar_given_nf,
   AdmsSensFadType & modelPar_nr,
   bool modelPar_given_nr,
   AdmsSensFadType & modelPar_isp,
   bool modelPar_given_isp,
   AdmsSensFadType & modelPar_wsp,
   bool modelPar_given_wsp,
   AdmsSensFadType & modelPar_nfp,
   bool modelPar_given_nfp,
   AdmsSensFadType & modelPar_fc,
   bool modelPar_given_fc,
   AdmsSensFadType & modelPar_cbeo,
   bool modelPar_given_cbeo,
   AdmsSensFadType & modelPar_cje,
   bool modelPar_given_cje,
   AdmsSensFadType & modelPar_pe,
   bool modelPar_given_pe,
   AdmsSensFadType & modelPar_me,
   bool modelPar_given_me,
   AdmsSensFadType & modelPar_aje,
   bool modelPar_given_aje,
   AdmsSensFadType & modelPar_cbco,
   bool modelPar_given_cbco,
   AdmsSensFadType & modelPar_cjc,
   bool modelPar_given_cjc,
   AdmsSensFadType & modelPar_pc,
   bool modelPar_given_pc,
   AdmsSensFadType & modelPar_mc,
   bool modelPar_given_mc,
   AdmsSensFadType & modelPar_ajc,
   bool modelPar_given_ajc,
   AdmsSensFadType & modelPar_vrt,
   bool modelPar_given_vrt,
   AdmsSensFadType & modelPar_art,
   bool modelPar_given_art,
   AdmsSensFadType & modelPar_qco,
   bool modelPar_given_qco,
   AdmsSensFadType & modelPar_cjep,
   bool modelPar_given_cjep,
   AdmsSensFadType & modelPar_cjcp,
   bool modelPar_given_cjcp,
   AdmsSensFadType & modelPar_ps,
   bool modelPar_given_ps,
   AdmsSensFadType & modelPar_ms,
   bool modelPar_given_ms,
   AdmsSensFadType & modelPar_ajs,
   bool modelPar_given_ajs,
   AdmsSensFadType & modelPar_ccso,
   bool modelPar_given_ccso,
   AdmsSensFadType & modelPar_ibei,
   bool modelPar_given_ibei,
   AdmsSensFadType & modelPar_wbe,
   bool modelPar_given_wbe,
   AdmsSensFadType & modelPar_nei,
   bool modelPar_given_nei,
   AdmsSensFadType & modelPar_qnibeir,
   bool modelPar_given_qnibeir,
   AdmsSensFadType & modelPar_iben,
   bool modelPar_given_iben,
   AdmsSensFadType & modelPar_nen,
   bool modelPar_given_nen,
   AdmsSensFadType & modelPar_ibci,
   bool modelPar_given_ibci,
   AdmsSensFadType & modelPar_nci,
   bool modelPar_given_nci,
   AdmsSensFadType & modelPar_ibcn,
   bool modelPar_given_ibcn,
   AdmsSensFadType & modelPar_ncn,
   bool modelPar_given_ncn,
   AdmsSensFadType & modelPar_ibeip,
   bool modelPar_given_ibeip,
   AdmsSensFadType & modelPar_ibenp,
   bool modelPar_given_ibenp,
   AdmsSensFadType & modelPar_ibcip,
   bool modelPar_given_ibcip,
   AdmsSensFadType & modelPar_ncip,
   bool modelPar_given_ncip,
   AdmsSensFadType & modelPar_ibcnp,
   bool modelPar_given_ibcnp,
   AdmsSensFadType & modelPar_ncnp,
   bool modelPar_given_ncnp,
   AdmsSensFadType & modelPar_vef,
   bool modelPar_given_vef,
   AdmsSensFadType & modelPar_ver,
   bool modelPar_given_ver,
   AdmsSensFadType & modelPar_ikf,
   bool modelPar_given_ikf,
   AdmsSensFadType & modelPar_nkf,
   bool modelPar_given_nkf,
   AdmsSensFadType & modelPar_ikr,
   bool modelPar_given_ikr,
   AdmsSensFadType & modelPar_ikp,
   bool modelPar_given_ikp,
   AdmsSensFadType & modelPar_tf,
   bool modelPar_given_tf,
   AdmsSensFadType & modelPar_qtf,
   bool modelPar_given_qtf,
   AdmsSensFadType & modelPar_xtf,
   bool modelPar_given_xtf,
   AdmsSensFadType & modelPar_vtf,
   bool modelPar_given_vtf,
   AdmsSensFadType & modelPar_itf,
   bool modelPar_given_itf,
   AdmsSensFadType & modelPar_tr,
   bool modelPar_given_tr,
   AdmsSensFadType & modelPar_td,
   bool modelPar_given_td,
   AdmsSensFadType & modelPar_avc1,
   bool modelPar_given_avc1,
   AdmsSensFadType & modelPar_avc2,
   bool modelPar_given_avc2,
   AdmsSensFadType & modelPar_avcx1,
   bool modelPar_given_avcx1,
   AdmsSensFadType & modelPar_avcx2,
   bool modelPar_given_avcx2,
   AdmsSensFadType & modelPar_mcx,
   bool modelPar_given_mcx,
   AdmsSensFadType & modelPar_vbbe,
   bool modelPar_given_vbbe,
   AdmsSensFadType & modelPar_nbbe,
   bool modelPar_given_nbbe,
   AdmsSensFadType & modelPar_ibbe,
   bool modelPar_given_ibbe,
   AdmsSensFadType & modelPar_tvbbe1,
   bool modelPar_given_tvbbe1,
   AdmsSensFadType & modelPar_tvbbe2,
   bool modelPar_given_tvbbe2,
   AdmsSensFadType & modelPar_tnbbe,
   bool modelPar_given_tnbbe,
   AdmsSensFadType & modelPar_vpte,
   bool modelPar_given_vpte,
   AdmsSensFadType & modelPar_ibk0,
   bool modelPar_given_ibk0,
   AdmsSensFadType & modelPar_abk,
   bool modelPar_given_abk,
   AdmsSensFadType & modelPar_bbk,
   bool modelPar_given_bbk,
   AdmsSensFadType & modelPar_kfn,
   bool modelPar_given_kfn,
   AdmsSensFadType & modelPar_afn,
   bool modelPar_given_afn,
   AdmsSensFadType & modelPar_bfn,
   bool modelPar_given_bfn,
   AdmsSensFadType & modelPar_rth,
   bool modelPar_given_rth,
   AdmsSensFadType & modelPar_cth,
   bool modelPar_given_cth,
   AdmsSensFadType & modelPar_xre,
   bool modelPar_given_xre,
   AdmsSensFadType & modelPar_xrb,
   bool modelPar_given_xrb,
   AdmsSensFadType & modelPar_xrbi,
   bool modelPar_given_xrbi,
   AdmsSensFadType & modelPar_xrbx,
   bool modelPar_given_xrbx,
   AdmsSensFadType & modelPar_xrc,
   bool modelPar_given_xrc,
   AdmsSensFadType & modelPar_xrci,
   bool modelPar_given_xrci,
   AdmsSensFadType & modelPar_xrcx,
   bool modelPar_given_xrcx,
   AdmsSensFadType & modelPar_xrbp,
   bool modelPar_given_xrbp,
   AdmsSensFadType & modelPar_xrs,
   bool modelPar_given_xrs,
   AdmsSensFadType & modelPar_xvo,
   bool modelPar_given_xvo,
   AdmsSensFadType & modelPar_ea,
   bool modelPar_given_ea,
   AdmsSensFadType & modelPar_eaie,
   bool modelPar_given_eaie,
   AdmsSensFadType & modelPar_eaic,
   bool modelPar_given_eaic,
   AdmsSensFadType & modelPar_eais,
   bool modelPar_given_eais,
   AdmsSensFadType & modelPar_eane,
   bool modelPar_given_eane,
   AdmsSensFadType & modelPar_eanc,
   bool modelPar_given_eanc,
   AdmsSensFadType & modelPar_eans,
   bool modelPar_given_eans,
   AdmsSensFadType & modelPar_eap,
   bool modelPar_given_eap,
   AdmsSensFadType & modelPar_dear,
   bool modelPar_given_dear,
   AdmsSensFadType & modelPar_xis,
   bool modelPar_given_xis,
   AdmsSensFadType & modelPar_xii,
   bool modelPar_given_xii,
   AdmsSensFadType & modelPar_xin,
   bool modelPar_given_xin,
   AdmsSensFadType & modelPar_xisr,
   bool modelPar_given_xisr,
   AdmsSensFadType & modelPar_xikf,
   bool modelPar_given_xikf,
   AdmsSensFadType & modelPar_tavc,
   bool modelPar_given_tavc,
   AdmsSensFadType & modelPar_tavcx,
   bool modelPar_given_tavcx,
   AdmsSensFadType & modelPar_tnf,
   bool modelPar_given_tnf,
   AdmsSensFadType & modelPar_tcvef,
   bool modelPar_given_tcvef,
   AdmsSensFadType & modelPar_tcver,
   bool modelPar_given_tcver,
   AdmsSensFadType & modelPar_tcrth,
   bool modelPar_given_tcrth,
   // non-reals (including hidden)
   int modelPar_type,
   bool modelPar_given_type,
   int modelPar_VBICtype,
   int modelPar_qbm,
   bool modelPar_given_qbm// model variables
   ,
   // reals
   AdmsSensFadType & modelVar_tiniK,
   AdmsSensFadType & modelVar_Iikr,
   AdmsSensFadType & modelVar_Iikp,
   AdmsSensFadType & modelVar_Ihrcf,
   AdmsSensFadType & modelVar_Ivtf,
   AdmsSensFadType & modelVar_Iitf,
   AdmsSensFadType & modelVar_sltf,
   AdmsSensFadType & modelVar_VmaxExp,
   AdmsSensFadType & modelVar_gminMod,
   AdmsSensFadType & modelVar_imaxMod,
   double admsTemperature, double ADMSgmin_arg, const Instance & theInstance);

#endif // Xyce_ADMS_SENSITIVITIES


// Limited exponential --- NOT what verilog LRM says, but what qucs,
// ng-spice, and zspice do.

template <typename T>
T limexp(const T &x)
{
  if ((x) < 80.0)
    return (exp(x));
  else
    return (exp(80.0)*(x-79.0));
}

// Maybe this will do as a substitute for a sacado-provided "floor" and "ceil"?
// It is wrong to try to propagate the Sacado derivatives to the return
// value, as the floor and ceil functions have zero derivative w.r.t. any
// of the variables in the argument, except when X is an integer at which
// point the derivative is undefined.
template <typename T>
double ADMSfloor(const T & x)
{
  return (floor(x.val()));
}

template <typename T>
double ADMSceil(const T & x)
{
  return (ceil(x.val()));
}


struct Traits: public DeviceTraits<Model, Instance, BJT::Traits>
{
  static const char *name() {return "VBIC 1.3 3T";}
  static const char *deviceTypeName() {return "q level 11";}

  static int numNodes() {return 3;}
  static int numOptionalNodes() { return 6;}
  static bool modelRequired() {return true;}
  static bool isLinearDevice() {return false;}

  static Device *factory(const Configuration &configuration, const FactoryBlock &factory_block);
  static void loadModelParameters(ParametricData<Model> &model_parameters);
  static void loadInstanceParameters(ParametricData<Instance> &instance_parameters);
};

//-----------------------------------------------------------------------------
// Class         : Instance

//
// Purpose       : This class represents a single instance  of the
//                 device.  It mainly contains indices and pointers into
//                 the matrix equation (see the resistor instance class for
//                 more details).
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Instance : public DeviceInstance
{
  friend class ParametricData<Instance>;
  friend class Model;
#ifdef Xyce_ADMS_SENSITIVITIES
  friend class InstanceSensitivity;
  friend class ModelSensitivity;
#endif // Xyce_ADMS_SENSITIVITIES
  friend struct Traits;

public:
  Instance(
     const Configuration &       configuration,
     const InstanceBlock &       instance_block,
     Model &                     model,
     const FactoryBlock &        factory_block);

  ~Instance();

private:
  Instance(const Instance &);
  Instance &operator=(const Instance &);

public:
  void registerLIDs( const LocalIdVector & intLIDVecRef,
                     const LocalIdVector & extLIDVecRef );
  void registerStoreLIDs( const LocalIdVector & stoLIDVecRef );
  void setupPointers();

  void loadNodeSymbols(Util::SymbolTable &symbol_table) const;

  const JacobianStamp & jacobianStamp() const;
  void registerJacLIDs( const JacobianStamp & jacLIDVec );

  void registerBranchDataLIDs(const std::vector<int> & branchLIDVecRef);

  bool processParams();
  bool updateTemperature ( const double & temp = -999.0 );
  bool updateIntermediateVars ();
  bool updatePrimaryState ();
  bool updateSecondaryState ();

  // load functions, residual:
  bool loadDAEQVector ();
  bool loadDAEFVector ();

  // load functions, Jacobian:
  bool loadDAEdQdx ();
  bool loadDAEdFdx ();

  int getNumNoiseSources () const;  // 13
  void setupNoiseSources (Xyce::Analysis::NoiseData & noiseData);
  void getNoiseSources (Xyce::Analysis::NoiseData & noiseData);

private:

public:
  // iterator reference to the vbic13 model which owns this instance.
  // Getters and setters
  Model &getModel()
  {
    return model_;
  }

private:

  Model & model_;   //< Owning Model
  // Begin verilog Instance Variables
  //   Instance Parameters
  double m;
  double trise;
  int sw_noise;
  int sw_et;
  //  Variables of global_instance scope
  double is_t;
  double d_is_t_dTemp_dt_GND;
  double isrr_t;
  double d_isrr_t_dTemp_dt_GND;
  double ibei_t;
  double d_ibei_t_dTemp_dt_GND;
  double ibci_t;
  double d_ibci_t_dTemp_dt_GND;
  double isp_t;
  double d_isp_t_dTemp_dt_GND;
  double iben_t;
  double d_iben_t_dTemp_dt_GND;
  double ibcn_t;
  double d_ibcn_t_dTemp_dt_GND;
  double ibeip_t;
  double d_ibeip_t_dTemp_dt_GND;
  double ibenp_t;
  double d_ibenp_t_dTemp_dt_GND;
  double ibcip_t;
  double d_ibcip_t_dTemp_dt_GND;
  double ibcnp_t;
  double d_ibcnp_t_dTemp_dt_GND;
  double tdevC;
  double d_tdevC_dTemp_dt_GND;
  double tdevK;
  double d_tdevK_dTemp_dt_GND;
  double rT;
  double d_rT_dTemp_dt_GND;
  double Gcx;
  double d_Gcx_dTemp_dt_GND;
  double Gci;
  double d_Gci_dTemp_dt_GND;
  double Gbx;
  double d_Gbx_dTemp_dt_GND;
  double Gbi;
  double d_Gbi_dTemp_dt_GND;
  double Ge;
  double d_Ge_dTemp_dt_GND;
  double Gbp;
  double d_Gbp_dTemp_dt_GND;
  double maxvIfi;
  double maxvIri;
  double maxvIp;
  double maxvIbbe;
  double maxvIbei;
  double maxvIben;
  double maxvIbci;
  double maxvIbcn;
  double maxvIbeip;
  double maxvIbenp;
  double vtv;
  double d_vtv_dTemp_dt_GND;
  double Itzf;
  double d_Itzf_dTemp_dt_GND;
  double d_Itzf_dV_bi_ei;
  double d_Itzf_dV_bi_ci;
  double qb;
  double d_qb_dV_bi_ei;
  double d_qb_dTemp_dt_GND;
  double d_qb_dV_bi_ci;
  double qbp;
  double d_qbp_dV_bx_bp;
  double d_qbp_dV_bi_ei;
  double d_qbp_dTemp_dt_GND;
  double d_qbp_dV_bi_ci;
  double Ibe;
  double d_Ibe_dV_bx_ei;
  double d_Ibe_dTemp_dt_GND;
  double d_Ibe_dV_bi_ei;
  double d_Ibe_dV_bi_ci;
  double d_Ibe_dV_bx_bp;
  double Ibex;
  double d_Ibex_dTemp_dt_GND;
  double d_Ibex_dV_bx_ei;
  double d_Ibex_dV_bx_bp;
  double d_Ibex_dV_bi_ci;
  double d_Ibex_dV_bi_ei;
  double Ibep;
  double d_Ibep_dTemp_dt_GND;
  double d_Ibep_dV_bx_ei;
  double d_Ibep_dV_bx_bp;
  double d_Ibep_dV_bi_ci;
  double d_Ibep_dV_bi_ei;
  double Irci;
  double d_Irci_dV_cx_ci;
  double d_Irci_dTemp_dt_GND;
  double d_Irci_dV_bx_ei;
  double d_Irci_dV_bx_bp;
  double d_Irci_dV_bi_ci;
  double d_Irci_dV_bi_ei;
  double d_Irci_dV_bi_cx;
  double Vrci;
  double d_Vrci_dV_cx_ci;
  double mMod;
  double tVCrit;
  // end verilog Instance Variables=====
  // Nodal LID Variables
  int li_c;
  int li_b;
  int li_e;
  int li_dt;
  int li_cx;
  int li_ci;
  int li_bx;
  int li_bi;
  int li_ei;
  int li_bp;
  int li_xf1;
  int li_xf2;
  // end Nodal LID Variables
  // Branch LID Variables
  // end Branch LID Variables
  // Lead (branch) LID Variables
  int li_branch_ic;
  int li_branch_ib;
  int li_branch_ie;
  // end Lead (branch) LID Variables
  // Jacobian  pointers
  double * f_bi_Equ_bx_Node_Ptr;
  double * f_bi_Equ_bp_Node_Ptr;
  double * f_ei_Equ_bx_Node_Ptr;
  double * f_ei_Equ_bp_Node_Ptr;
  double * f_bi_Equ_bi_Node_Ptr;
  double * f_bi_Equ_ci_Node_Ptr;
  double * f_ei_Equ_bi_Node_Ptr;
  double * f_ei_Equ_ci_Node_Ptr;
  double * f_bi_Equ_ei_Node_Ptr;
  double * f_ei_Equ_ei_Node_Ptr;
  double * f_bi_Equ_dt_Node_Ptr;
  double * f_ei_Equ_dt_Node_Ptr;
  double * f_bx_Equ_bi_Node_Ptr;
  double * f_bx_Equ_ei_Node_Ptr;
  double * f_bx_Equ_ci_Node_Ptr;
  double * f_bx_Equ_bx_Node_Ptr;
  double * f_bx_Equ_bp_Node_Ptr;
  double * f_bx_Equ_dt_Node_Ptr;
  double * f_ci_Equ_xf2_Node_Ptr;
  double * f_ei_Equ_xf2_Node_Ptr;
  double * f_ci_Equ_bi_Node_Ptr;
  double * f_ci_Equ_ei_Node_Ptr;
  double * f_ci_Equ_ci_Node_Ptr;
  double * f_ci_Equ_dt_Node_Ptr;
  double * f_bi_Equ_xf2_Node_Ptr;
  double * f_ci_Equ_bx_Node_Ptr;
  double * f_ci_Equ_bp_Node_Ptr;
  double * f_cx_Equ_bi_Node_Ptr;
  double * f_cx_Equ_ci_Node_Ptr;
  double * f_bx_Equ_cx_Node_Ptr;
  double * f_cx_Equ_bx_Node_Ptr;
  double * f_cx_Equ_cx_Node_Ptr;
  double * f_cx_Equ_dt_Node_Ptr;
  double * f_bx_Equ_c_Node_Ptr;
  double * f_cx_Equ_c_Node_Ptr;
  double * f_bp_Equ_bi_Node_Ptr;
  double * f_bp_Equ_ei_Node_Ptr;
  double * f_bp_Equ_ci_Node_Ptr;
  double * f_bp_Equ_bx_Node_Ptr;
  double * f_bp_Equ_bp_Node_Ptr;
  double * f_bp_Equ_dt_Node_Ptr;
  double * f_c_Equ_dt_Node_Ptr;
  double * f_c_Equ_c_Node_Ptr;
  double * f_c_Equ_cx_Node_Ptr;
  double * f_ci_Equ_cx_Node_Ptr;
  double * f_cx_Equ_ei_Node_Ptr;
  double * f_cx_Equ_bp_Node_Ptr;
  double * f_b_Equ_dt_Node_Ptr;
  double * f_b_Equ_b_Node_Ptr;
  double * f_b_Equ_bx_Node_Ptr;
  double * f_bx_Equ_b_Node_Ptr;
  double * f_e_Equ_dt_Node_Ptr;
  double * f_e_Equ_e_Node_Ptr;
  double * f_e_Equ_ei_Node_Ptr;
  double * f_ei_Equ_e_Node_Ptr;
  double * f_bp_Equ_cx_Node_Ptr;
  double * f_xf1_Equ_bi_Node_Ptr;
  double * f_xf1_Equ_ci_Node_Ptr;
  double * f_xf1_Equ_ei_Node_Ptr;
  double * f_xf1_Equ_dt_Node_Ptr;
  double * f_xf1_Equ_xf2_Node_Ptr;
  double * f_xf2_Equ_xf1_Node_Ptr;
  double * f_xf2_Equ_xf2_Node_Ptr;
  double * f_dt_Equ_dt_Node_Ptr;
  double * f_dt_Equ_bp_Node_Ptr;
  double * f_dt_Equ_cx_Node_Ptr;
  double * f_dt_Equ_e_Node_Ptr;
  double * f_dt_Equ_ei_Node_Ptr;
  double * f_dt_Equ_bx_Node_Ptr;
  double * f_dt_Equ_bi_Node_Ptr;
  double * f_dt_Equ_b_Node_Ptr;
  double * f_dt_Equ_ci_Node_Ptr;
  double * f_dt_Equ_c_Node_Ptr;
  double * f_dt_Equ_xf2_Node_Ptr;
  double * f_bi_Equ_cx_Node_Ptr;
  double * f_ei_Equ_cx_Node_Ptr;
  double * f_b_Equ_e_Node_Ptr;
  double * f_e_Equ_b_Node_Ptr;
  double * f_b_Equ_c_Node_Ptr;
  double * f_c_Equ_b_Node_Ptr;
  double * f_xf1_Equ_xf1_Node_Ptr;
  double * q_bi_Equ_bx_Node_Ptr;
  double * q_bi_Equ_bp_Node_Ptr;
  double * q_ei_Equ_bx_Node_Ptr;
  double * q_ei_Equ_bp_Node_Ptr;
  double * q_bi_Equ_bi_Node_Ptr;
  double * q_bi_Equ_ci_Node_Ptr;
  double * q_ei_Equ_bi_Node_Ptr;
  double * q_ei_Equ_ci_Node_Ptr;
  double * q_bi_Equ_ei_Node_Ptr;
  double * q_ei_Equ_ei_Node_Ptr;
  double * q_bi_Equ_dt_Node_Ptr;
  double * q_ei_Equ_dt_Node_Ptr;
  double * q_bx_Equ_bi_Node_Ptr;
  double * q_bx_Equ_ei_Node_Ptr;
  double * q_bx_Equ_ci_Node_Ptr;
  double * q_bx_Equ_bx_Node_Ptr;
  double * q_bx_Equ_bp_Node_Ptr;
  double * q_bx_Equ_dt_Node_Ptr;
  double * q_ci_Equ_xf2_Node_Ptr;
  double * q_ei_Equ_xf2_Node_Ptr;
  double * q_ci_Equ_bi_Node_Ptr;
  double * q_ci_Equ_ei_Node_Ptr;
  double * q_ci_Equ_ci_Node_Ptr;
  double * q_ci_Equ_dt_Node_Ptr;
  double * q_bi_Equ_xf2_Node_Ptr;
  double * q_ci_Equ_bx_Node_Ptr;
  double * q_ci_Equ_bp_Node_Ptr;
  double * q_cx_Equ_bi_Node_Ptr;
  double * q_cx_Equ_ci_Node_Ptr;
  double * q_bx_Equ_cx_Node_Ptr;
  double * q_cx_Equ_bx_Node_Ptr;
  double * q_cx_Equ_cx_Node_Ptr;
  double * q_cx_Equ_dt_Node_Ptr;
  double * q_bx_Equ_c_Node_Ptr;
  double * q_cx_Equ_c_Node_Ptr;
  double * q_bp_Equ_bi_Node_Ptr;
  double * q_bp_Equ_ei_Node_Ptr;
  double * q_bp_Equ_ci_Node_Ptr;
  double * q_bp_Equ_bx_Node_Ptr;
  double * q_bp_Equ_bp_Node_Ptr;
  double * q_bp_Equ_dt_Node_Ptr;
  double * q_c_Equ_dt_Node_Ptr;
  double * q_c_Equ_c_Node_Ptr;
  double * q_c_Equ_cx_Node_Ptr;
  double * q_ci_Equ_cx_Node_Ptr;
  double * q_cx_Equ_ei_Node_Ptr;
  double * q_cx_Equ_bp_Node_Ptr;
  double * q_b_Equ_dt_Node_Ptr;
  double * q_b_Equ_b_Node_Ptr;
  double * q_b_Equ_bx_Node_Ptr;
  double * q_bx_Equ_b_Node_Ptr;
  double * q_e_Equ_dt_Node_Ptr;
  double * q_e_Equ_e_Node_Ptr;
  double * q_e_Equ_ei_Node_Ptr;
  double * q_ei_Equ_e_Node_Ptr;
  double * q_bp_Equ_cx_Node_Ptr;
  double * q_xf1_Equ_bi_Node_Ptr;
  double * q_xf1_Equ_ci_Node_Ptr;
  double * q_xf1_Equ_ei_Node_Ptr;
  double * q_xf1_Equ_dt_Node_Ptr;
  double * q_xf1_Equ_xf2_Node_Ptr;
  double * q_xf2_Equ_xf1_Node_Ptr;
  double * q_xf2_Equ_xf2_Node_Ptr;
  double * q_dt_Equ_dt_Node_Ptr;
  double * q_dt_Equ_bp_Node_Ptr;
  double * q_dt_Equ_cx_Node_Ptr;
  double * q_dt_Equ_e_Node_Ptr;
  double * q_dt_Equ_ei_Node_Ptr;
  double * q_dt_Equ_bx_Node_Ptr;
  double * q_dt_Equ_bi_Node_Ptr;
  double * q_dt_Equ_b_Node_Ptr;
  double * q_dt_Equ_ci_Node_Ptr;
  double * q_dt_Equ_c_Node_Ptr;
  double * q_dt_Equ_xf2_Node_Ptr;
  double * q_bi_Equ_cx_Node_Ptr;
  double * q_ei_Equ_cx_Node_Ptr;
  double * q_b_Equ_e_Node_Ptr;
  double * q_e_Equ_b_Node_Ptr;
  double * q_b_Equ_c_Node_Ptr;
  double * q_c_Equ_b_Node_Ptr;
  double * q_xf1_Equ_xf1_Node_Ptr;
  // Jacobian offsets
  int A_bi_Equ_bx_NodeOffset;
  int A_bi_Equ_bp_NodeOffset;
  int A_ei_Equ_bx_NodeOffset;
  int A_ei_Equ_bp_NodeOffset;
  int A_bi_Equ_bi_NodeOffset;
  int A_bi_Equ_ci_NodeOffset;
  int A_ei_Equ_bi_NodeOffset;
  int A_ei_Equ_ci_NodeOffset;
  int A_bi_Equ_ei_NodeOffset;
  int A_ei_Equ_ei_NodeOffset;
  int A_bi_Equ_dt_NodeOffset;
  int A_ei_Equ_dt_NodeOffset;
  int A_bx_Equ_bi_NodeOffset;
  int A_bx_Equ_ei_NodeOffset;
  int A_bx_Equ_ci_NodeOffset;
  int A_bx_Equ_bx_NodeOffset;
  int A_bx_Equ_bp_NodeOffset;
  int A_bx_Equ_dt_NodeOffset;
  int A_ci_Equ_xf2_NodeOffset;
  int A_ei_Equ_xf2_NodeOffset;
  int A_ci_Equ_bi_NodeOffset;
  int A_ci_Equ_ei_NodeOffset;
  int A_ci_Equ_ci_NodeOffset;
  int A_ci_Equ_dt_NodeOffset;
  int A_bi_Equ_xf2_NodeOffset;
  int A_ci_Equ_bx_NodeOffset;
  int A_ci_Equ_bp_NodeOffset;
  int A_cx_Equ_bi_NodeOffset;
  int A_cx_Equ_ci_NodeOffset;
  int A_bx_Equ_cx_NodeOffset;
  int A_cx_Equ_bx_NodeOffset;
  int A_cx_Equ_cx_NodeOffset;
  int A_cx_Equ_dt_NodeOffset;
  int A_bx_Equ_c_NodeOffset;
  int A_cx_Equ_c_NodeOffset;
  int A_bp_Equ_bi_NodeOffset;
  int A_bp_Equ_ei_NodeOffset;
  int A_bp_Equ_ci_NodeOffset;
  int A_bp_Equ_bx_NodeOffset;
  int A_bp_Equ_bp_NodeOffset;
  int A_bp_Equ_dt_NodeOffset;
  int A_c_Equ_dt_NodeOffset;
  int A_c_Equ_c_NodeOffset;
  int A_c_Equ_cx_NodeOffset;
  int A_ci_Equ_cx_NodeOffset;
  int A_cx_Equ_ei_NodeOffset;
  int A_cx_Equ_bp_NodeOffset;
  int A_b_Equ_dt_NodeOffset;
  int A_b_Equ_b_NodeOffset;
  int A_b_Equ_bx_NodeOffset;
  int A_bx_Equ_b_NodeOffset;
  int A_e_Equ_dt_NodeOffset;
  int A_e_Equ_e_NodeOffset;
  int A_e_Equ_ei_NodeOffset;
  int A_ei_Equ_e_NodeOffset;
  int A_bp_Equ_cx_NodeOffset;
  int A_xf1_Equ_bi_NodeOffset;
  int A_xf1_Equ_ci_NodeOffset;
  int A_xf1_Equ_ei_NodeOffset;
  int A_xf1_Equ_dt_NodeOffset;
  int A_xf1_Equ_xf2_NodeOffset;
  int A_xf2_Equ_xf1_NodeOffset;
  int A_xf2_Equ_xf2_NodeOffset;
  int A_dt_Equ_dt_NodeOffset;
  int A_dt_Equ_bp_NodeOffset;
  int A_dt_Equ_cx_NodeOffset;
  int A_dt_Equ_e_NodeOffset;
  int A_dt_Equ_ei_NodeOffset;
  int A_dt_Equ_bx_NodeOffset;
  int A_dt_Equ_bi_NodeOffset;
  int A_dt_Equ_b_NodeOffset;
  int A_dt_Equ_ci_NodeOffset;
  int A_dt_Equ_c_NodeOffset;
  int A_dt_Equ_xf2_NodeOffset;
  int A_bi_Equ_cx_NodeOffset;
  int A_ei_Equ_cx_NodeOffset;
  int A_b_Equ_e_NodeOffset;
  int A_e_Equ_b_NodeOffset;
  int A_b_Equ_c_NodeOffset;
  int A_c_Equ_b_NodeOffset;
  int A_xf1_Equ_xf1_NodeOffset;
  // end of Jacobian and pointers
  // node numbers
  static const int admsNodeID_c = 0;
  static const int admsNodeID_b = 1;
  static const int admsNodeID_e = 2;
  static const int admsNodeID_dt = 3;
  static const int admsNodeID_cx = 4;
  static const int admsNodeID_ci = 5;
  static const int admsNodeID_bx = 6;
  static const int admsNodeID_bi = 7;
  static const int admsNodeID_ei = 8;
  static const int admsNodeID_bp = 9;
  static const int admsNodeID_xf1 = 10;
  static const int admsNodeID_xf2 = 11;
  static const int admsNodeID_GND = -1;
  // end node numbers
  // Additional IDs for branch equations
  // end branch numbers
  // Probe numbers
  static const int admsProbeID_V_xf2_GND = 0;
  static const int admsProbeID_V_xf1_GND = 1;
  static const int admsProbeID_V_bp_cx = 2;
  static const int admsProbeID_V_e_ei = 3;
  static const int admsProbeID_V_bx_bi = 4;
  static const int admsProbeID_V_b_bx = 5;
  static const int admsProbeID_V_cx_ci = 6;
  static const int admsProbeID_V_c_cx = 7;
  static const int admsProbeID_V_b_c = 8;
  static const int admsProbeID_V_b_e = 9;
  static const int admsProbeID_V_bx_bp = 10;
  static const int admsProbeID_V_ci_ei = 11;
  static const int admsProbeID_V_bx_cx = 12;
  static const int admsProbeID_V_bi_cx = 13;
  static const int admsProbeID_V_bi_ci = 14;
  static const int admsProbeID_V_bx_ei = 15;
  static const int admsProbeID_V_bi_ei = 16;
  static const int admsProbeID_Temp_dt_GND = 17;
  // end probe numbers
  // Store LIDs
  int li_store_admsProbeID_Temp_dt_GND;
  int li_store_admsProbeID_V_bi_ei;
  int li_store_admsProbeID_V_bx_ei;
  int li_store_admsProbeID_V_bi_ci;
  int li_store_admsProbeID_V_bi_cx;
  int li_store_admsProbeID_V_bx_cx;
  int li_store_admsProbeID_V_bx_bp;
  int li_store_admsProbeID_V_b_e;
  // end store LIDs
  // Arrays to hold probes
  std::vector < double > probeVars;
  std::vector < std::vector < double > > d_probeVars;
  // Arrays to hold contributions
  // dynamic contributions are differentiated w.r.t time
  std::vector < double > staticContributions;
  std::vector < std::vector < double > > d_staticContributions;
  std::vector < double > dynamicContributions;
  std::vector < std::vector < double > > d_dynamicContributions;
  //vectors to hold noise information for communication between methods
  std::vector<double> noiseContribsPower;
  std::vector<double> noiseContribsExponent;

  // This array stores the differences between original and limited variables.
  std::vector<double> probeDiffs;
  // These store the Jdxp's for F and Q, respectively
  std::vector<double> Jdxp_static;
  std::vector<double> Jdxp_dynamic;

  // this is what we'll use when any model uses $temperature.  We'll
  // set it in updateTemperature, and initialize it to whatever
  // is in devOptions when the instance is constructed.
  double admsTemperature;

  // vt at $temperature;
  double adms_vt_nom;

  // This is used to flag whether any internal nodes are exposed on the instance
  // line.  They are set if the user specifies more than the minimum number of
  // required nodes.
  bool dtExternalNodeMode;
  bool cxExternalNodeMode;
  bool ciExternalNodeMode;
  bool bxExternalNodeMode;
  bool biExternalNodeMode;
  bool eiExternalNodeMode;
  
  // This one is for the annoying bogus "XyceADMSInstTemp" parameter
  // that we need so we can set it from the device manager when there's no
  // "TEMP" parameter to use
  double admsInstTemp;


  static JacobianStamp jacStamp;
  static IdVector nodeMap;
  static PairMap pairToJacStampMap;

  // These instance-owned vectors are for storage of lead current data
  std::vector<double> leadCurrentF;
  std::vector<double> leadCurrentQ;
};



namespace AnalogFunctions
{

// Analog Function limRTH
template<typename ScalarT> ScalarT limRTH(ScalarT orig, ScalarT old)
{


  ScalarT limRTH;
  ScalarT t0;
  ScalarT t1;
  ScalarT retval;
  {
    t0 = (orig-old);
    t1 = fabs(t0);
    retval = orig;
    if ((t1>5.0))
    {
      if ((t0>0))
      {
        retval = (old+5.0);
      }
      else
      {
        retval = (old-5.0);
      }
    }
    limRTH = retval;
  }
  return(limRTH);
}

}


//-----------------------------------------------------------------------------
// Class         : Model

// Purpose       :
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Model : public DeviceModel
{
  typedef std::vector<Instance *> InstanceVector;

  friend class ParametricData<Model>;
  friend class Instance;
#ifdef Xyce_ADMS_SENSITIVITIES
  friend class InstanceSensitivity;
  friend class ModelSensitivity;
#endif // Xyce_ADMS_SENSITIVITIES
  friend struct Traits;

public:
  Model(
     const Configuration &       configuration,
     const ModelBlock &          model_block,
     const FactoryBlock &        factory_block);

  ~Model();

private:
  Model(const Model &);
  Model &operator=(const Model &);

public:
  virtual void forEachInstance(DeviceInstanceOp &op) const /* override */;
  virtual std::ostream &printOutInstances(std::ostream &os) const;
  bool processParams();
  bool processInstanceParams();

private:

public:
  void addInstance(Instance *instance)
  {
    instanceContainer.push_back(instance);
  }

  void setupBaseInstanceContainer()
  {
    std::vector<Instance*>::iterator iter = instanceContainer.begin();
    std::vector<Instance*>::iterator end   = instanceContainer.end();
    for ( ; iter!=end; ++iter)
    {
      Xyce::Device::DeviceModel::baseInstanceContainer.push_back( static_cast<Xyce::Device::DeviceInstance *>(*iter) );
    }
  }

private:
  std::vector<Instance*> instanceContainer;

private:

  // This one is for the annoying bogus "XyceADMSInstTemp" parameter
  // that we need so we can set it from the device manager when there's no
  // "TEMP" model parameter to use
  double admsModTemp;
  // Begin verilog Model Variables
  //   Model Parameters
  double npn;
  double pnp;
  int type;
  int VBICtype;
  double scale;
  double shrink;
  double tmin;
  double tmax;
  double gmin;
  double pnjmaxi;
  double maxexp;
  double tnom;
  double tminclip;
  double tmaxclip;
  double rcx;
  double rci;
  double vo;
  double gamm;
  double hrcf;
  double rbx;
  double rbi;
  double re;
  double rs;
  double rbp;
  double is;
  double isrr;
  double nf;
  double nr;
  int qbm;
  double isp;
  double wsp;
  double nfp;
  double fc;
  double cbeo;
  double cje;
  double pe;
  double me;
  double aje;
  double cbco;
  double cjc;
  double pc;
  double mc;
  double ajc;
  double vrt;
  double art;
  double qco;
  double cjep;
  double cjcp;
  double ps;
  double ms;
  double ajs;
  double ccso;
  double ibei;
  double wbe;
  double nei;
  double qnibeir;
  double iben;
  double nen;
  double ibci;
  double nci;
  double ibcn;
  double ncn;
  double ibeip;
  double ibenp;
  double ibcip;
  double ncip;
  double ibcnp;
  double ncnp;
  double vef;
  double ver;
  double ikf;
  double nkf;
  double ikr;
  double ikp;
  double tf;
  double qtf;
  double xtf;
  double vtf;
  double itf;
  double tr;
  double td;
  double avc1;
  double avc2;
  double avcx1;
  double avcx2;
  double mcx;
  double vbbe;
  double nbbe;
  double ibbe;
  double tvbbe1;
  double tvbbe2;
  double tnbbe;
  double vpte;
  double ibk0;
  double abk;
  double bbk;
  double kfn;
  double afn;
  double bfn;
  double rth;
  double cth;
  double xre;
  double xrb;
  double xrbi;
  double xrbx;
  double xrc;
  double xrci;
  double xrcx;
  double xrbp;
  double xrs;
  double xvo;
  double ea;
  double eaie;
  double eaic;
  double eais;
  double eane;
  double eanc;
  double eans;
  double eap;
  double dear;
  double xis;
  double xii;
  double xin;
  double xisr;
  double xikf;
  double tavc;
  double tavcx;
  double tnf;
  double tcvef;
  double tcver;
  double tcrth;
  //  Variables of global_model scope
  double tiniK;
  double Iikr;
  double Iikp;
  double Ihrcf;
  double Ivtf;
  double Iitf;
  double sltf;
  double VmaxExp;
  double gminMod;
  double imaxMod;
  // end verilog model variables=====
};

void registerDevice(const DeviceCountMap& deviceMap = DeviceCountMap(),
                    const std::set<int>& levelSet = std::set<int>());

} // namespace ADMSvbic13
} // namespace Device
} // namespace Xyce
#endif //Xyce_N_DEV_ADMSvbic13_h
