
// -*-c++-*-
//-------------------------------------------------------------------------
//   Copyright 2002-2019 National Technology & Engineering Solutions of
//   Sandia, LLC (NTESS).  Under the terms of Contract DE-NA0003525 with
//   NTESS, the U.S. Government retains certain rights in this software.
//
//   This file is part of the Xyce(TM) Parallel Electrical Simulator.
//
//   Xyce(TM) is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   Xyce(TM) is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with Xyce(TM).
//   If not, see <http://www.gnu.org/licenses/>.
//-------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
// Purpose        :
//
// Special Notes  : Generated from verilog file hicumL2V2p4p0.va with ADMS
//                  interface for Xyce 6.12.0
//                  DO NOT EDIT THIS FILE DIRECTLY!  It may be overwritten!
//
// Creator        : admsXml-2.3.6
//
// Creation Date  : Mon, 08 Apr 2019 13:58:39
//
//-----------------------------------------------------------------------------
#ifndef Xyce_N_DEV_ADMShicumL2va_h
#define Xyce_N_DEV_ADMShicumL2va_h


#include <Sacado.hpp>

#include <N_DEV_Configuration.h>
#include <N_DEV_Const.h>
#include <N_DEV_DeviceBlock.h>
#include <N_DEV_DeviceInstance.h>
#include <N_DEV_DeviceModel.h>
#include <N_DEV_BJT.h>


namespace Xyce {
namespace Device {
namespace ADMShicumL2va {

// This typedef is for our automatic differentiation:
typedef Sacado::Fad::SFad<double,21> AdmsFadType;
typedef Sacado::Fad::SFad<double,1> AdmsSensFadType;

class Model;
class Instance;
class InstanceSensitivity;

#ifdef Xyce_ADMS_SENSITIVITIES
//-----------------------------------------------------------------------------
// Class         : InstanceSensitivity
//
// Purpose       : This class is a functor for sensitivity
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class InstanceSensitivity : public baseSensitivity
{
public:
  InstanceSensitivity() :
    baseSensitivity() {};

  virtual ~InstanceSensitivity() {};

  virtual void operator()(
     const ParameterBase &entity,
     const std::string &param,
     std::vector<double> & dfdp,
     std::vector<double> & dqdp,
     std::vector<double> & dbdp,
     std::vector<int> & Findices,
     std::vector<int> & Qindices,
     std::vector<int> & Bindices
                          ) const ;
};

static InstanceSensitivity instSens;


//-----------------------------------------------------------------------------
// Class         : ModelSensitivity
//
// Purpose       : This class is a functor for sensitivity
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class ModelSensitivity : public baseSensitivity
{
public:
  ModelSensitivity() :
    baseSensitivity() {};

  virtual ~ModelSensitivity() {};

  virtual void operator()(
     const ParameterBase &entity,
     const std::string &param,
     std::vector<double> & dfdp,
     std::vector<double> & dqdp,
     std::vector<double> & dbdp,
     std::vector<int> & Findices,
     std::vector<int> & Qindices,
     std::vector<int> & Bindices
                          ) const ;
};

static ModelSensitivity modSens;
#endif // Xyce_ADMS_SENSITIVITIES

// general purpose free functions
// thermal voltage at kelvin temperature temp)
template <typename T> static inline T adms_vt(const T temp) {return(CONSTKoverQ*temp);};

// Figure out how to template this shiznit!
//-----------------------------------------------------------------------------


template<typename Tin>
static Tin adms_ternary_op(const bool cond, const Tin &ifTrue, const Tin &ifFalse)
{
  if (cond)
    return ifTrue;
  else
    return ifFalse;
}

template<typename Tin>
static Tin adms_ternary_op(const bool cond, const Tin &ifTrue, const double &ifFalse)
{
  if (cond)
    return ifTrue;
  else
    return Tin(ifFalse);
}

template<typename Tin>
static Tin adms_ternary_op(const bool cond, const double &ifTrue, const Tin &ifFalse)
{
  if (cond)
    return Tin(ifTrue);
  else
    return ifFalse;
}




#ifdef Xyce_ADMS_SENSITIVITIES
//-----------------------------------------------------------------------------
// Free functions used by sensitivity
//
//-----------------------------------------------------------------------------
void evaluateModelEquations(
   std::vector <double> & probeVars,
   // probe constants
   const int admsProbeID_V_n2_GND,
   const int admsProbeID_V_n1_GND,
   const int admsProbeID_V_si_s,
   const int admsProbeID_V_bp_e,
   const int admsProbeID_V_b_e,
   const int admsProbeID_V_ci_ei,
   const int admsProbeID_V_xf_GND,
   const int admsProbeID_V_xf2_GND,
   const int admsProbeID_V_xf1_GND,
   const int admsProbeID_V_b_bp,
   const int admsProbeID_V_ci_c,
   const int admsProbeID_V_ei_e,
   const int admsProbeID_V_bp_bi,
   const int admsProbeID_V_tnode_GND,
   const int admsProbeID_V_s_c,
   const int admsProbeID_V_si_ci,
   const int admsProbeID_V_b_ci,
   const int admsProbeID_V_bp_ci,
   const int admsProbeID_V_bp_ei,
   const int admsProbeID_V_bi_ci,
   const int admsProbeID_V_bi_ei,
   // node constants
   const int admsNodeID_c,
   const int admsNodeID_b,
   const int admsNodeID_e,
   const int admsNodeID_s,
   const int admsNodeID_tnode,
   const int admsNodeID_ci,
   const int admsNodeID_ei,
   const int admsNodeID_bp,
   const int admsNodeID_bi,
   const int admsNodeID_si,
   const int admsNodeID_xf1,
   const int admsNodeID_xf2,
   const int admsNodeID_xf,
   const int admsNodeID_n1,
   const int admsNodeID_n2,
   // instance variables
   // reals
   AdmsSensFadType & instanceVar_VT,
   AdmsSensFadType & instanceVar_Tdev,
   AdmsSensFadType & instanceVar_qtt0,
   AdmsSensFadType & instanceVar_ln_qtt0,
   AdmsSensFadType & instanceVar_r_VgVT,
   AdmsSensFadType & instanceVar_V_gT,
   AdmsSensFadType & instanceVar_dT,
   AdmsSensFadType & instanceVar_k,
   AdmsSensFadType & instanceVar_ireis_t,
   AdmsSensFadType & instanceVar_ibeis_t,
   AdmsSensFadType & instanceVar_ibcxs_t,
   AdmsSensFadType & instanceVar_ibcis_t,
   AdmsSensFadType & instanceVar_iscs_t,
   AdmsSensFadType & instanceVar_cjci0_t,
   AdmsSensFadType & instanceVar_cjs0_t,
   AdmsSensFadType & instanceVar_cscp0_t,
   AdmsSensFadType & instanceVar_rci0_t,
   AdmsSensFadType & instanceVar_vlim_t,
   AdmsSensFadType & instanceVar_vces_t,
   AdmsSensFadType & instanceVar_thcs_t,
   AdmsSensFadType & instanceVar_tef0_t,
   AdmsSensFadType & instanceVar_rbi0_t,
   AdmsSensFadType & instanceVar_t0_t,
   AdmsSensFadType & instanceVar_vdei_t,
   AdmsSensFadType & instanceVar_vdci_t,
   AdmsSensFadType & instanceVar_vpts_t,
   AdmsSensFadType & instanceVar_vptsp_t,
   AdmsSensFadType & instanceVar_itss_t,
   AdmsSensFadType & instanceVar_tsf_t,
   AdmsSensFadType & instanceVar_c10_t,
   AdmsSensFadType & instanceVar_cjei0_t,
   AdmsSensFadType & instanceVar_qp0_t,
   AdmsSensFadType & instanceVar_vdcx_t,
   AdmsSensFadType & instanceVar_vptcx_t,
   AdmsSensFadType & instanceVar_cjcx01_t,
   AdmsSensFadType & instanceVar_cjcx02_t,
   AdmsSensFadType & instanceVar_cratio_t,
   AdmsSensFadType & instanceVar_ibeps_t,
   AdmsSensFadType & instanceVar_ireps_t,
   AdmsSensFadType & instanceVar_cjep0_t,
   AdmsSensFadType & instanceVar_ajei_t,
   AdmsSensFadType & instanceVar_qavl_t,
   AdmsSensFadType & instanceVar_favl_t,
   AdmsSensFadType & instanceVar_kavl_t,
   AdmsSensFadType & instanceVar_ibets_t,
   AdmsSensFadType & instanceVar_abet_t,
   AdmsSensFadType & instanceVar_vptci_t,
   AdmsSensFadType & instanceVar_vdep_t,
   AdmsSensFadType & instanceVar_ajep_t,
   AdmsSensFadType & instanceVar_zetatef,
   AdmsSensFadType & instanceVar_k1,
   AdmsSensFadType & instanceVar_k2,
   AdmsSensFadType & instanceVar_dvg0,
   AdmsSensFadType & instanceVar_vge_t,
   AdmsSensFadType & instanceVar_vgb_t,
   AdmsSensFadType & instanceVar_vgbe_t,
   AdmsSensFadType & instanceVar_vds_t,
   AdmsSensFadType & instanceVar_vdsp_t,
   AdmsSensFadType & instanceVar_vt0,
   AdmsSensFadType & instanceVar_Tnom,
   AdmsSensFadType & instanceVar_Tamb,
   AdmsSensFadType & instanceVar_a,
   AdmsSensFadType & instanceVar_avs,
   AdmsSensFadType & instanceVar_zetabci,
   AdmsSensFadType & instanceVar_zetabcxt,
   AdmsSensFadType & instanceVar_zetasct,
   AdmsSensFadType & instanceVar_vgbe0,
   AdmsSensFadType & instanceVar_mg,
   AdmsSensFadType & instanceVar_vgbe_t0,
   AdmsSensFadType & instanceVar_vgbc0,
   AdmsSensFadType & instanceVar_vgsc0,
   AdmsSensFadType & instanceVar_cbcpar1,
   AdmsSensFadType & instanceVar_cbcpar2,
   AdmsSensFadType & instanceVar_cbepar2,
   AdmsSensFadType & instanceVar_cbepar1,
   AdmsSensFadType & instanceVar_Oich,
   AdmsSensFadType & instanceVar_Otbhrec,
   AdmsSensFadType & instanceVar_it,
   AdmsSensFadType & instanceVar_ibei,
   AdmsSensFadType & instanceVar_ibci,
   AdmsSensFadType & instanceVar_ibep,
   AdmsSensFadType & instanceVar_iavl,
   AdmsSensFadType & instanceVar_ijbcx,
   AdmsSensFadType & instanceVar_ijsc,
   AdmsSensFadType & instanceVar_rth_t,
   AdmsSensFadType & instanceVar_vdj0,
   AdmsSensFadType & instanceVar_vdjt,
   AdmsSensFadType & instanceVar_vdt,
   AdmsSensFadType & instanceVar_Tf,
   AdmsSensFadType & instanceVar_cjcx01,
   AdmsSensFadType & instanceVar_cjcx02,
   AdmsSensFadType & instanceVar_betadc,
   AdmsSensFadType & instanceVar_hjei0_t,
   AdmsSensFadType & instanceVar_ahjei_t,
   AdmsSensFadType & instanceVar_hf0_t,
   AdmsSensFadType & instanceVar_hfe_t,
   AdmsSensFadType & instanceVar_hfc_t,
   AdmsSensFadType & instanceVar_rbx_t,
   AdmsSensFadType & instanceVar_rcx_t,
   AdmsSensFadType & instanceVar_re_t,
   AdmsSensFadType & instanceVar_rbi,
   // non-reals
   int instanceVar_use_aval,
   // model parameters
   // reals
   AdmsSensFadType & modelPar_c10,
   bool modelPar_given_c10,
   AdmsSensFadType & modelPar_qp0,
   bool modelPar_given_qp0,
   AdmsSensFadType & modelPar_ich,
   bool modelPar_given_ich,
   AdmsSensFadType & modelPar_hf0,
   bool modelPar_given_hf0,
   AdmsSensFadType & modelPar_hfe,
   bool modelPar_given_hfe,
   AdmsSensFadType & modelPar_hfc,
   bool modelPar_given_hfc,
   AdmsSensFadType & modelPar_hjei,
   bool modelPar_given_hjei,
   AdmsSensFadType & modelPar_ahjei,
   bool modelPar_given_ahjei,
   AdmsSensFadType & modelPar_rhjei,
   bool modelPar_given_rhjei,
   AdmsSensFadType & modelPar_hjci,
   bool modelPar_given_hjci,
   AdmsSensFadType & modelPar_ibeis,
   bool modelPar_given_ibeis,
   AdmsSensFadType & modelPar_mbei,
   bool modelPar_given_mbei,
   AdmsSensFadType & modelPar_ireis,
   bool modelPar_given_ireis,
   AdmsSensFadType & modelPar_mrei,
   bool modelPar_given_mrei,
   AdmsSensFadType & modelPar_ibeps,
   bool modelPar_given_ibeps,
   AdmsSensFadType & modelPar_mbep,
   bool modelPar_given_mbep,
   AdmsSensFadType & modelPar_ireps,
   bool modelPar_given_ireps,
   AdmsSensFadType & modelPar_mrep,
   bool modelPar_given_mrep,
   AdmsSensFadType & modelPar_mcf,
   bool modelPar_given_mcf,
   AdmsSensFadType & modelPar_tbhrec,
   bool modelPar_given_tbhrec,
   AdmsSensFadType & modelPar_ibcis,
   bool modelPar_given_ibcis,
   AdmsSensFadType & modelPar_mbci,
   bool modelPar_given_mbci,
   AdmsSensFadType & modelPar_ibcxs,
   bool modelPar_given_ibcxs,
   AdmsSensFadType & modelPar_mbcx,
   bool modelPar_given_mbcx,
   AdmsSensFadType & modelPar_ibets,
   bool modelPar_given_ibets,
   AdmsSensFadType & modelPar_abet,
   bool modelPar_given_abet,
   AdmsSensFadType & modelPar_favl,
   bool modelPar_given_favl,
   AdmsSensFadType & modelPar_qavl,
   bool modelPar_given_qavl,
   AdmsSensFadType & modelPar_kavl,
   bool modelPar_given_kavl,
   AdmsSensFadType & modelPar_alfav,
   bool modelPar_given_alfav,
   AdmsSensFadType & modelPar_alqav,
   bool modelPar_given_alqav,
   AdmsSensFadType & modelPar_alkav,
   bool modelPar_given_alkav,
   AdmsSensFadType & modelPar_rbi0,
   bool modelPar_given_rbi0,
   AdmsSensFadType & modelPar_rbx,
   bool modelPar_given_rbx,
   AdmsSensFadType & modelPar_fgeo,
   bool modelPar_given_fgeo,
   AdmsSensFadType & modelPar_fdqr0,
   bool modelPar_given_fdqr0,
   AdmsSensFadType & modelPar_fcrbi,
   bool modelPar_given_fcrbi,
   AdmsSensFadType & modelPar_fqi,
   bool modelPar_given_fqi,
   AdmsSensFadType & modelPar_re,
   bool modelPar_given_re,
   AdmsSensFadType & modelPar_rcx,
   bool modelPar_given_rcx,
   AdmsSensFadType & modelPar_itss,
   bool modelPar_given_itss,
   AdmsSensFadType & modelPar_msf,
   bool modelPar_given_msf,
   AdmsSensFadType & modelPar_iscs,
   bool modelPar_given_iscs,
   AdmsSensFadType & modelPar_msc,
   bool modelPar_given_msc,
   AdmsSensFadType & modelPar_tsf,
   bool modelPar_given_tsf,
   AdmsSensFadType & modelPar_rsu,
   bool modelPar_given_rsu,
   AdmsSensFadType & modelPar_csu,
   bool modelPar_given_csu,
   AdmsSensFadType & modelPar_cjei0,
   bool modelPar_given_cjei0,
   AdmsSensFadType & modelPar_vdei,
   bool modelPar_given_vdei,
   AdmsSensFadType & modelPar_zei,
   bool modelPar_given_zei,
   AdmsSensFadType & modelPar_ajei,
   bool modelPar_given_ajei,
   AdmsSensFadType & modelPar_cjep0,
   bool modelPar_given_cjep0,
   AdmsSensFadType & modelPar_vdep,
   bool modelPar_given_vdep,
   AdmsSensFadType & modelPar_zep,
   bool modelPar_given_zep,
   AdmsSensFadType & modelPar_ajep,
   bool modelPar_given_ajep,
   AdmsSensFadType & modelPar_cjci0,
   bool modelPar_given_cjci0,
   AdmsSensFadType & modelPar_vdci,
   bool modelPar_given_vdci,
   AdmsSensFadType & modelPar_zci,
   bool modelPar_given_zci,
   AdmsSensFadType & modelPar_vptci,
   bool modelPar_given_vptci,
   AdmsSensFadType & modelPar_cjcx0,
   bool modelPar_given_cjcx0,
   AdmsSensFadType & modelPar_vdcx,
   bool modelPar_given_vdcx,
   AdmsSensFadType & modelPar_zcx,
   bool modelPar_given_zcx,
   AdmsSensFadType & modelPar_vptcx,
   bool modelPar_given_vptcx,
   AdmsSensFadType & modelPar_fbcpar,
   bool modelPar_given_fbcpar,
   AdmsSensFadType & modelPar_fbepar,
   bool modelPar_given_fbepar,
   AdmsSensFadType & modelPar_cjs0,
   bool modelPar_given_cjs0,
   AdmsSensFadType & modelPar_vds,
   bool modelPar_given_vds,
   AdmsSensFadType & modelPar_zs,
   bool modelPar_given_zs,
   AdmsSensFadType & modelPar_vpts,
   bool modelPar_given_vpts,
   AdmsSensFadType & modelPar_cscp0,
   bool modelPar_given_cscp0,
   AdmsSensFadType & modelPar_vdsp,
   bool modelPar_given_vdsp,
   AdmsSensFadType & modelPar_zsp,
   bool modelPar_given_zsp,
   AdmsSensFadType & modelPar_vptsp,
   bool modelPar_given_vptsp,
   AdmsSensFadType & modelPar_t0,
   bool modelPar_given_t0,
   AdmsSensFadType & modelPar_dt0h,
   bool modelPar_given_dt0h,
   AdmsSensFadType & modelPar_tbvl,
   bool modelPar_given_tbvl,
   AdmsSensFadType & modelPar_tef0,
   bool modelPar_given_tef0,
   AdmsSensFadType & modelPar_gtfe,
   bool modelPar_given_gtfe,
   AdmsSensFadType & modelPar_thcs,
   bool modelPar_given_thcs,
   AdmsSensFadType & modelPar_ahc,
   bool modelPar_given_ahc,
   AdmsSensFadType & modelPar_fthc,
   bool modelPar_given_fthc,
   AdmsSensFadType & modelPar_rci0,
   bool modelPar_given_rci0,
   AdmsSensFadType & modelPar_vlim,
   bool modelPar_given_vlim,
   AdmsSensFadType & modelPar_vces,
   bool modelPar_given_vces,
   AdmsSensFadType & modelPar_vpt,
   bool modelPar_given_vpt,
   AdmsSensFadType & modelPar_aick,
   bool modelPar_given_aick,
   AdmsSensFadType & modelPar_delck,
   bool modelPar_given_delck,
   AdmsSensFadType & modelPar_tr,
   bool modelPar_given_tr,
   AdmsSensFadType & modelPar_vcbar,
   bool modelPar_given_vcbar,
   AdmsSensFadType & modelPar_icbar,
   bool modelPar_given_icbar,
   AdmsSensFadType & modelPar_acbar,
   bool modelPar_given_acbar,
   AdmsSensFadType & modelPar_cbepar,
   bool modelPar_given_cbepar,
   AdmsSensFadType & modelPar_cbcpar,
   bool modelPar_given_cbcpar,
   AdmsSensFadType & modelPar_alqf,
   bool modelPar_given_alqf,
   AdmsSensFadType & modelPar_alit,
   bool modelPar_given_alit,
   AdmsSensFadType & modelPar_kf,
   bool modelPar_given_kf,
   AdmsSensFadType & modelPar_af,
   bool modelPar_given_af,
   AdmsSensFadType & modelPar_kfre,
   bool modelPar_given_kfre,
   AdmsSensFadType & modelPar_afre,
   bool modelPar_given_afre,
   AdmsSensFadType & modelPar_latb,
   bool modelPar_given_latb,
   AdmsSensFadType & modelPar_latl,
   bool modelPar_given_latl,
   AdmsSensFadType & modelPar_vgb,
   bool modelPar_given_vgb,
   AdmsSensFadType & modelPar_alt0,
   bool modelPar_given_alt0,
   AdmsSensFadType & modelPar_kt0,
   bool modelPar_given_kt0,
   AdmsSensFadType & modelPar_zetaci,
   bool modelPar_given_zetaci,
   AdmsSensFadType & modelPar_alvs,
   bool modelPar_given_alvs,
   AdmsSensFadType & modelPar_alces,
   bool modelPar_given_alces,
   AdmsSensFadType & modelPar_zetarbi,
   bool modelPar_given_zetarbi,
   AdmsSensFadType & modelPar_zetarbx,
   bool modelPar_given_zetarbx,
   AdmsSensFadType & modelPar_zetarcx,
   bool modelPar_given_zetarcx,
   AdmsSensFadType & modelPar_zetare,
   bool modelPar_given_zetare,
   AdmsSensFadType & modelPar_zetacx,
   bool modelPar_given_zetacx,
   AdmsSensFadType & modelPar_vge,
   bool modelPar_given_vge,
   AdmsSensFadType & modelPar_vgc,
   bool modelPar_given_vgc,
   AdmsSensFadType & modelPar_vgs,
   bool modelPar_given_vgs,
   AdmsSensFadType & modelPar_f1vg,
   bool modelPar_given_f1vg,
   AdmsSensFadType & modelPar_f2vg,
   bool modelPar_given_f2vg,
   AdmsSensFadType & modelPar_zetact,
   bool modelPar_given_zetact,
   AdmsSensFadType & modelPar_zetabet,
   bool modelPar_given_zetabet,
   AdmsSensFadType & modelPar_alb,
   bool modelPar_given_alb,
   AdmsSensFadType & modelPar_dvgbe,
   bool modelPar_given_dvgbe,
   AdmsSensFadType & modelPar_zetahjei,
   bool modelPar_given_zetahjei,
   AdmsSensFadType & modelPar_zetavgbe,
   bool modelPar_given_zetavgbe,
   AdmsSensFadType & modelPar_rth,
   bool modelPar_given_rth,
   AdmsSensFadType & modelPar_zetarth,
   bool modelPar_given_zetarth,
   AdmsSensFadType & modelPar_alrth,
   bool modelPar_given_alrth,
   AdmsSensFadType & modelPar_cth,
   bool modelPar_given_cth,
   AdmsSensFadType & modelPar_flcomp,
   bool modelPar_given_flcomp,
   AdmsSensFadType & modelPar_tnom,
   bool modelPar_given_tnom,
   AdmsSensFadType & modelPar_dt,
   bool modelPar_given_dt,
   // non-reals (including hidden)
   int modelPar_tunode,
   bool modelPar_given_tunode,
   int modelPar_flnqs,
   bool modelPar_given_flnqs,
   int modelPar_cfbe,
   bool modelPar_given_cfbe,
   int modelPar_flcono,
   bool modelPar_given_flcono,
   int modelPar_flsh,
   bool modelPar_given_flsh,
   int modelPar_type,
   bool modelPar_given_type,
   // basic variables
   double admsTemperature, double adms_vt_nom, double ADMSgmin_arg, std::vector <AdmsSensFadType> & staticContributions, std::vector <AdmsSensFadType> & dynamicContributions, const Instance & theInstance);

void evaluateInitialInstance(
   // instance variables
   // reals
   AdmsSensFadType & instanceVar_VT,
   AdmsSensFadType & instanceVar_Tdev,
   AdmsSensFadType & instanceVar_qtt0,
   AdmsSensFadType & instanceVar_ln_qtt0,
   AdmsSensFadType & instanceVar_r_VgVT,
   AdmsSensFadType & instanceVar_V_gT,
   AdmsSensFadType & instanceVar_dT,
   AdmsSensFadType & instanceVar_k,
   AdmsSensFadType & instanceVar_ireis_t,
   AdmsSensFadType & instanceVar_ibeis_t,
   AdmsSensFadType & instanceVar_ibcxs_t,
   AdmsSensFadType & instanceVar_ibcis_t,
   AdmsSensFadType & instanceVar_iscs_t,
   AdmsSensFadType & instanceVar_cjci0_t,
   AdmsSensFadType & instanceVar_cjs0_t,
   AdmsSensFadType & instanceVar_cscp0_t,
   AdmsSensFadType & instanceVar_rci0_t,
   AdmsSensFadType & instanceVar_vlim_t,
   AdmsSensFadType & instanceVar_vces_t,
   AdmsSensFadType & instanceVar_thcs_t,
   AdmsSensFadType & instanceVar_tef0_t,
   AdmsSensFadType & instanceVar_rbi0_t,
   AdmsSensFadType & instanceVar_t0_t,
   AdmsSensFadType & instanceVar_vdei_t,
   AdmsSensFadType & instanceVar_vdci_t,
   AdmsSensFadType & instanceVar_vpts_t,
   AdmsSensFadType & instanceVar_vptsp_t,
   AdmsSensFadType & instanceVar_itss_t,
   AdmsSensFadType & instanceVar_tsf_t,
   AdmsSensFadType & instanceVar_c10_t,
   AdmsSensFadType & instanceVar_cjei0_t,
   AdmsSensFadType & instanceVar_qp0_t,
   AdmsSensFadType & instanceVar_vdcx_t,
   AdmsSensFadType & instanceVar_vptcx_t,
   AdmsSensFadType & instanceVar_cjcx01_t,
   AdmsSensFadType & instanceVar_cjcx02_t,
   AdmsSensFadType & instanceVar_cratio_t,
   AdmsSensFadType & instanceVar_ibeps_t,
   AdmsSensFadType & instanceVar_ireps_t,
   AdmsSensFadType & instanceVar_cjep0_t,
   AdmsSensFadType & instanceVar_ajei_t,
   AdmsSensFadType & instanceVar_qavl_t,
   AdmsSensFadType & instanceVar_favl_t,
   AdmsSensFadType & instanceVar_kavl_t,
   AdmsSensFadType & instanceVar_ibets_t,
   AdmsSensFadType & instanceVar_abet_t,
   AdmsSensFadType & instanceVar_vptci_t,
   AdmsSensFadType & instanceVar_vdep_t,
   AdmsSensFadType & instanceVar_ajep_t,
   AdmsSensFadType & instanceVar_zetatef,
   AdmsSensFadType & instanceVar_k1,
   AdmsSensFadType & instanceVar_k2,
   AdmsSensFadType & instanceVar_dvg0,
   AdmsSensFadType & instanceVar_vge_t,
   AdmsSensFadType & instanceVar_vgb_t,
   AdmsSensFadType & instanceVar_vgbe_t,
   AdmsSensFadType & instanceVar_vds_t,
   AdmsSensFadType & instanceVar_vdsp_t,
   AdmsSensFadType & instanceVar_vt0,
   AdmsSensFadType & instanceVar_Tnom,
   AdmsSensFadType & instanceVar_Tamb,
   AdmsSensFadType & instanceVar_a,
   AdmsSensFadType & instanceVar_avs,
   AdmsSensFadType & instanceVar_zetabci,
   AdmsSensFadType & instanceVar_zetabcxt,
   AdmsSensFadType & instanceVar_zetasct,
   AdmsSensFadType & instanceVar_vgbe0,
   AdmsSensFadType & instanceVar_mg,
   AdmsSensFadType & instanceVar_vgbe_t0,
   AdmsSensFadType & instanceVar_vgbc0,
   AdmsSensFadType & instanceVar_vgsc0,
   AdmsSensFadType & instanceVar_cbcpar1,
   AdmsSensFadType & instanceVar_cbcpar2,
   AdmsSensFadType & instanceVar_cbepar2,
   AdmsSensFadType & instanceVar_cbepar1,
   AdmsSensFadType & instanceVar_Oich,
   AdmsSensFadType & instanceVar_Otbhrec,
   AdmsSensFadType & instanceVar_it,
   AdmsSensFadType & instanceVar_ibei,
   AdmsSensFadType & instanceVar_ibci,
   AdmsSensFadType & instanceVar_ibep,
   AdmsSensFadType & instanceVar_iavl,
   AdmsSensFadType & instanceVar_ijbcx,
   AdmsSensFadType & instanceVar_ijsc,
   AdmsSensFadType & instanceVar_rth_t,
   AdmsSensFadType & instanceVar_vdj0,
   AdmsSensFadType & instanceVar_vdjt,
   AdmsSensFadType & instanceVar_vdt,
   AdmsSensFadType & instanceVar_Tf,
   AdmsSensFadType & instanceVar_cjcx01,
   AdmsSensFadType & instanceVar_cjcx02,
   AdmsSensFadType & instanceVar_betadc,
   AdmsSensFadType & instanceVar_hjei0_t,
   AdmsSensFadType & instanceVar_ahjei_t,
   AdmsSensFadType & instanceVar_hf0_t,
   AdmsSensFadType & instanceVar_hfe_t,
   AdmsSensFadType & instanceVar_hfc_t,
   AdmsSensFadType & instanceVar_rbx_t,
   AdmsSensFadType & instanceVar_rcx_t,
   AdmsSensFadType & instanceVar_re_t,
   AdmsSensFadType & instanceVar_rbi,
   // non-reals
   int instanceVar_use_aval,
   // model parameters
   // reals
   AdmsSensFadType & modelPar_c10,
   bool modelPar_given_c10,
   AdmsSensFadType & modelPar_qp0,
   bool modelPar_given_qp0,
   AdmsSensFadType & modelPar_ich,
   bool modelPar_given_ich,
   AdmsSensFadType & modelPar_hf0,
   bool modelPar_given_hf0,
   AdmsSensFadType & modelPar_hfe,
   bool modelPar_given_hfe,
   AdmsSensFadType & modelPar_hfc,
   bool modelPar_given_hfc,
   AdmsSensFadType & modelPar_hjei,
   bool modelPar_given_hjei,
   AdmsSensFadType & modelPar_ahjei,
   bool modelPar_given_ahjei,
   AdmsSensFadType & modelPar_rhjei,
   bool modelPar_given_rhjei,
   AdmsSensFadType & modelPar_hjci,
   bool modelPar_given_hjci,
   AdmsSensFadType & modelPar_ibeis,
   bool modelPar_given_ibeis,
   AdmsSensFadType & modelPar_mbei,
   bool modelPar_given_mbei,
   AdmsSensFadType & modelPar_ireis,
   bool modelPar_given_ireis,
   AdmsSensFadType & modelPar_mrei,
   bool modelPar_given_mrei,
   AdmsSensFadType & modelPar_ibeps,
   bool modelPar_given_ibeps,
   AdmsSensFadType & modelPar_mbep,
   bool modelPar_given_mbep,
   AdmsSensFadType & modelPar_ireps,
   bool modelPar_given_ireps,
   AdmsSensFadType & modelPar_mrep,
   bool modelPar_given_mrep,
   AdmsSensFadType & modelPar_mcf,
   bool modelPar_given_mcf,
   AdmsSensFadType & modelPar_tbhrec,
   bool modelPar_given_tbhrec,
   AdmsSensFadType & modelPar_ibcis,
   bool modelPar_given_ibcis,
   AdmsSensFadType & modelPar_mbci,
   bool modelPar_given_mbci,
   AdmsSensFadType & modelPar_ibcxs,
   bool modelPar_given_ibcxs,
   AdmsSensFadType & modelPar_mbcx,
   bool modelPar_given_mbcx,
   AdmsSensFadType & modelPar_ibets,
   bool modelPar_given_ibets,
   AdmsSensFadType & modelPar_abet,
   bool modelPar_given_abet,
   AdmsSensFadType & modelPar_favl,
   bool modelPar_given_favl,
   AdmsSensFadType & modelPar_qavl,
   bool modelPar_given_qavl,
   AdmsSensFadType & modelPar_kavl,
   bool modelPar_given_kavl,
   AdmsSensFadType & modelPar_alfav,
   bool modelPar_given_alfav,
   AdmsSensFadType & modelPar_alqav,
   bool modelPar_given_alqav,
   AdmsSensFadType & modelPar_alkav,
   bool modelPar_given_alkav,
   AdmsSensFadType & modelPar_rbi0,
   bool modelPar_given_rbi0,
   AdmsSensFadType & modelPar_rbx,
   bool modelPar_given_rbx,
   AdmsSensFadType & modelPar_fgeo,
   bool modelPar_given_fgeo,
   AdmsSensFadType & modelPar_fdqr0,
   bool modelPar_given_fdqr0,
   AdmsSensFadType & modelPar_fcrbi,
   bool modelPar_given_fcrbi,
   AdmsSensFadType & modelPar_fqi,
   bool modelPar_given_fqi,
   AdmsSensFadType & modelPar_re,
   bool modelPar_given_re,
   AdmsSensFadType & modelPar_rcx,
   bool modelPar_given_rcx,
   AdmsSensFadType & modelPar_itss,
   bool modelPar_given_itss,
   AdmsSensFadType & modelPar_msf,
   bool modelPar_given_msf,
   AdmsSensFadType & modelPar_iscs,
   bool modelPar_given_iscs,
   AdmsSensFadType & modelPar_msc,
   bool modelPar_given_msc,
   AdmsSensFadType & modelPar_tsf,
   bool modelPar_given_tsf,
   AdmsSensFadType & modelPar_rsu,
   bool modelPar_given_rsu,
   AdmsSensFadType & modelPar_csu,
   bool modelPar_given_csu,
   AdmsSensFadType & modelPar_cjei0,
   bool modelPar_given_cjei0,
   AdmsSensFadType & modelPar_vdei,
   bool modelPar_given_vdei,
   AdmsSensFadType & modelPar_zei,
   bool modelPar_given_zei,
   AdmsSensFadType & modelPar_ajei,
   bool modelPar_given_ajei,
   AdmsSensFadType & modelPar_cjep0,
   bool modelPar_given_cjep0,
   AdmsSensFadType & modelPar_vdep,
   bool modelPar_given_vdep,
   AdmsSensFadType & modelPar_zep,
   bool modelPar_given_zep,
   AdmsSensFadType & modelPar_ajep,
   bool modelPar_given_ajep,
   AdmsSensFadType & modelPar_cjci0,
   bool modelPar_given_cjci0,
   AdmsSensFadType & modelPar_vdci,
   bool modelPar_given_vdci,
   AdmsSensFadType & modelPar_zci,
   bool modelPar_given_zci,
   AdmsSensFadType & modelPar_vptci,
   bool modelPar_given_vptci,
   AdmsSensFadType & modelPar_cjcx0,
   bool modelPar_given_cjcx0,
   AdmsSensFadType & modelPar_vdcx,
   bool modelPar_given_vdcx,
   AdmsSensFadType & modelPar_zcx,
   bool modelPar_given_zcx,
   AdmsSensFadType & modelPar_vptcx,
   bool modelPar_given_vptcx,
   AdmsSensFadType & modelPar_fbcpar,
   bool modelPar_given_fbcpar,
   AdmsSensFadType & modelPar_fbepar,
   bool modelPar_given_fbepar,
   AdmsSensFadType & modelPar_cjs0,
   bool modelPar_given_cjs0,
   AdmsSensFadType & modelPar_vds,
   bool modelPar_given_vds,
   AdmsSensFadType & modelPar_zs,
   bool modelPar_given_zs,
   AdmsSensFadType & modelPar_vpts,
   bool modelPar_given_vpts,
   AdmsSensFadType & modelPar_cscp0,
   bool modelPar_given_cscp0,
   AdmsSensFadType & modelPar_vdsp,
   bool modelPar_given_vdsp,
   AdmsSensFadType & modelPar_zsp,
   bool modelPar_given_zsp,
   AdmsSensFadType & modelPar_vptsp,
   bool modelPar_given_vptsp,
   AdmsSensFadType & modelPar_t0,
   bool modelPar_given_t0,
   AdmsSensFadType & modelPar_dt0h,
   bool modelPar_given_dt0h,
   AdmsSensFadType & modelPar_tbvl,
   bool modelPar_given_tbvl,
   AdmsSensFadType & modelPar_tef0,
   bool modelPar_given_tef0,
   AdmsSensFadType & modelPar_gtfe,
   bool modelPar_given_gtfe,
   AdmsSensFadType & modelPar_thcs,
   bool modelPar_given_thcs,
   AdmsSensFadType & modelPar_ahc,
   bool modelPar_given_ahc,
   AdmsSensFadType & modelPar_fthc,
   bool modelPar_given_fthc,
   AdmsSensFadType & modelPar_rci0,
   bool modelPar_given_rci0,
   AdmsSensFadType & modelPar_vlim,
   bool modelPar_given_vlim,
   AdmsSensFadType & modelPar_vces,
   bool modelPar_given_vces,
   AdmsSensFadType & modelPar_vpt,
   bool modelPar_given_vpt,
   AdmsSensFadType & modelPar_aick,
   bool modelPar_given_aick,
   AdmsSensFadType & modelPar_delck,
   bool modelPar_given_delck,
   AdmsSensFadType & modelPar_tr,
   bool modelPar_given_tr,
   AdmsSensFadType & modelPar_vcbar,
   bool modelPar_given_vcbar,
   AdmsSensFadType & modelPar_icbar,
   bool modelPar_given_icbar,
   AdmsSensFadType & modelPar_acbar,
   bool modelPar_given_acbar,
   AdmsSensFadType & modelPar_cbepar,
   bool modelPar_given_cbepar,
   AdmsSensFadType & modelPar_cbcpar,
   bool modelPar_given_cbcpar,
   AdmsSensFadType & modelPar_alqf,
   bool modelPar_given_alqf,
   AdmsSensFadType & modelPar_alit,
   bool modelPar_given_alit,
   AdmsSensFadType & modelPar_kf,
   bool modelPar_given_kf,
   AdmsSensFadType & modelPar_af,
   bool modelPar_given_af,
   AdmsSensFadType & modelPar_kfre,
   bool modelPar_given_kfre,
   AdmsSensFadType & modelPar_afre,
   bool modelPar_given_afre,
   AdmsSensFadType & modelPar_latb,
   bool modelPar_given_latb,
   AdmsSensFadType & modelPar_latl,
   bool modelPar_given_latl,
   AdmsSensFadType & modelPar_vgb,
   bool modelPar_given_vgb,
   AdmsSensFadType & modelPar_alt0,
   bool modelPar_given_alt0,
   AdmsSensFadType & modelPar_kt0,
   bool modelPar_given_kt0,
   AdmsSensFadType & modelPar_zetaci,
   bool modelPar_given_zetaci,
   AdmsSensFadType & modelPar_alvs,
   bool modelPar_given_alvs,
   AdmsSensFadType & modelPar_alces,
   bool modelPar_given_alces,
   AdmsSensFadType & modelPar_zetarbi,
   bool modelPar_given_zetarbi,
   AdmsSensFadType & modelPar_zetarbx,
   bool modelPar_given_zetarbx,
   AdmsSensFadType & modelPar_zetarcx,
   bool modelPar_given_zetarcx,
   AdmsSensFadType & modelPar_zetare,
   bool modelPar_given_zetare,
   AdmsSensFadType & modelPar_zetacx,
   bool modelPar_given_zetacx,
   AdmsSensFadType & modelPar_vge,
   bool modelPar_given_vge,
   AdmsSensFadType & modelPar_vgc,
   bool modelPar_given_vgc,
   AdmsSensFadType & modelPar_vgs,
   bool modelPar_given_vgs,
   AdmsSensFadType & modelPar_f1vg,
   bool modelPar_given_f1vg,
   AdmsSensFadType & modelPar_f2vg,
   bool modelPar_given_f2vg,
   AdmsSensFadType & modelPar_zetact,
   bool modelPar_given_zetact,
   AdmsSensFadType & modelPar_zetabet,
   bool modelPar_given_zetabet,
   AdmsSensFadType & modelPar_alb,
   bool modelPar_given_alb,
   AdmsSensFadType & modelPar_dvgbe,
   bool modelPar_given_dvgbe,
   AdmsSensFadType & modelPar_zetahjei,
   bool modelPar_given_zetahjei,
   AdmsSensFadType & modelPar_zetavgbe,
   bool modelPar_given_zetavgbe,
   AdmsSensFadType & modelPar_rth,
   bool modelPar_given_rth,
   AdmsSensFadType & modelPar_zetarth,
   bool modelPar_given_zetarth,
   AdmsSensFadType & modelPar_alrth,
   bool modelPar_given_alrth,
   AdmsSensFadType & modelPar_cth,
   bool modelPar_given_cth,
   AdmsSensFadType & modelPar_flcomp,
   bool modelPar_given_flcomp,
   AdmsSensFadType & modelPar_tnom,
   bool modelPar_given_tnom,
   AdmsSensFadType & modelPar_dt,
   bool modelPar_given_dt,
   // non-reals (including hidden)
   int modelPar_tunode,
   bool modelPar_given_tunode,
   int modelPar_flnqs,
   bool modelPar_given_flnqs,
   int modelPar_cfbe,
   bool modelPar_given_cfbe,
   int modelPar_flcono,
   bool modelPar_given_flcono,
   int modelPar_flsh,
   bool modelPar_given_flsh,
   int modelPar_type,
   bool modelPar_given_type,
   double admsTemperature,double adms_vt_nom, double ADMSgmin_arg, const Instance & theInstance);

void evaluateInitialModel(
   // model parameters
   // reals
   AdmsSensFadType & modelPar_c10,
   bool modelPar_given_c10,
   AdmsSensFadType & modelPar_qp0,
   bool modelPar_given_qp0,
   AdmsSensFadType & modelPar_ich,
   bool modelPar_given_ich,
   AdmsSensFadType & modelPar_hf0,
   bool modelPar_given_hf0,
   AdmsSensFadType & modelPar_hfe,
   bool modelPar_given_hfe,
   AdmsSensFadType & modelPar_hfc,
   bool modelPar_given_hfc,
   AdmsSensFadType & modelPar_hjei,
   bool modelPar_given_hjei,
   AdmsSensFadType & modelPar_ahjei,
   bool modelPar_given_ahjei,
   AdmsSensFadType & modelPar_rhjei,
   bool modelPar_given_rhjei,
   AdmsSensFadType & modelPar_hjci,
   bool modelPar_given_hjci,
   AdmsSensFadType & modelPar_ibeis,
   bool modelPar_given_ibeis,
   AdmsSensFadType & modelPar_mbei,
   bool modelPar_given_mbei,
   AdmsSensFadType & modelPar_ireis,
   bool modelPar_given_ireis,
   AdmsSensFadType & modelPar_mrei,
   bool modelPar_given_mrei,
   AdmsSensFadType & modelPar_ibeps,
   bool modelPar_given_ibeps,
   AdmsSensFadType & modelPar_mbep,
   bool modelPar_given_mbep,
   AdmsSensFadType & modelPar_ireps,
   bool modelPar_given_ireps,
   AdmsSensFadType & modelPar_mrep,
   bool modelPar_given_mrep,
   AdmsSensFadType & modelPar_mcf,
   bool modelPar_given_mcf,
   AdmsSensFadType & modelPar_tbhrec,
   bool modelPar_given_tbhrec,
   AdmsSensFadType & modelPar_ibcis,
   bool modelPar_given_ibcis,
   AdmsSensFadType & modelPar_mbci,
   bool modelPar_given_mbci,
   AdmsSensFadType & modelPar_ibcxs,
   bool modelPar_given_ibcxs,
   AdmsSensFadType & modelPar_mbcx,
   bool modelPar_given_mbcx,
   AdmsSensFadType & modelPar_ibets,
   bool modelPar_given_ibets,
   AdmsSensFadType & modelPar_abet,
   bool modelPar_given_abet,
   AdmsSensFadType & modelPar_favl,
   bool modelPar_given_favl,
   AdmsSensFadType & modelPar_qavl,
   bool modelPar_given_qavl,
   AdmsSensFadType & modelPar_kavl,
   bool modelPar_given_kavl,
   AdmsSensFadType & modelPar_alfav,
   bool modelPar_given_alfav,
   AdmsSensFadType & modelPar_alqav,
   bool modelPar_given_alqav,
   AdmsSensFadType & modelPar_alkav,
   bool modelPar_given_alkav,
   AdmsSensFadType & modelPar_rbi0,
   bool modelPar_given_rbi0,
   AdmsSensFadType & modelPar_rbx,
   bool modelPar_given_rbx,
   AdmsSensFadType & modelPar_fgeo,
   bool modelPar_given_fgeo,
   AdmsSensFadType & modelPar_fdqr0,
   bool modelPar_given_fdqr0,
   AdmsSensFadType & modelPar_fcrbi,
   bool modelPar_given_fcrbi,
   AdmsSensFadType & modelPar_fqi,
   bool modelPar_given_fqi,
   AdmsSensFadType & modelPar_re,
   bool modelPar_given_re,
   AdmsSensFadType & modelPar_rcx,
   bool modelPar_given_rcx,
   AdmsSensFadType & modelPar_itss,
   bool modelPar_given_itss,
   AdmsSensFadType & modelPar_msf,
   bool modelPar_given_msf,
   AdmsSensFadType & modelPar_iscs,
   bool modelPar_given_iscs,
   AdmsSensFadType & modelPar_msc,
   bool modelPar_given_msc,
   AdmsSensFadType & modelPar_tsf,
   bool modelPar_given_tsf,
   AdmsSensFadType & modelPar_rsu,
   bool modelPar_given_rsu,
   AdmsSensFadType & modelPar_csu,
   bool modelPar_given_csu,
   AdmsSensFadType & modelPar_cjei0,
   bool modelPar_given_cjei0,
   AdmsSensFadType & modelPar_vdei,
   bool modelPar_given_vdei,
   AdmsSensFadType & modelPar_zei,
   bool modelPar_given_zei,
   AdmsSensFadType & modelPar_ajei,
   bool modelPar_given_ajei,
   AdmsSensFadType & modelPar_cjep0,
   bool modelPar_given_cjep0,
   AdmsSensFadType & modelPar_vdep,
   bool modelPar_given_vdep,
   AdmsSensFadType & modelPar_zep,
   bool modelPar_given_zep,
   AdmsSensFadType & modelPar_ajep,
   bool modelPar_given_ajep,
   AdmsSensFadType & modelPar_cjci0,
   bool modelPar_given_cjci0,
   AdmsSensFadType & modelPar_vdci,
   bool modelPar_given_vdci,
   AdmsSensFadType & modelPar_zci,
   bool modelPar_given_zci,
   AdmsSensFadType & modelPar_vptci,
   bool modelPar_given_vptci,
   AdmsSensFadType & modelPar_cjcx0,
   bool modelPar_given_cjcx0,
   AdmsSensFadType & modelPar_vdcx,
   bool modelPar_given_vdcx,
   AdmsSensFadType & modelPar_zcx,
   bool modelPar_given_zcx,
   AdmsSensFadType & modelPar_vptcx,
   bool modelPar_given_vptcx,
   AdmsSensFadType & modelPar_fbcpar,
   bool modelPar_given_fbcpar,
   AdmsSensFadType & modelPar_fbepar,
   bool modelPar_given_fbepar,
   AdmsSensFadType & modelPar_cjs0,
   bool modelPar_given_cjs0,
   AdmsSensFadType & modelPar_vds,
   bool modelPar_given_vds,
   AdmsSensFadType & modelPar_zs,
   bool modelPar_given_zs,
   AdmsSensFadType & modelPar_vpts,
   bool modelPar_given_vpts,
   AdmsSensFadType & modelPar_cscp0,
   bool modelPar_given_cscp0,
   AdmsSensFadType & modelPar_vdsp,
   bool modelPar_given_vdsp,
   AdmsSensFadType & modelPar_zsp,
   bool modelPar_given_zsp,
   AdmsSensFadType & modelPar_vptsp,
   bool modelPar_given_vptsp,
   AdmsSensFadType & modelPar_t0,
   bool modelPar_given_t0,
   AdmsSensFadType & modelPar_dt0h,
   bool modelPar_given_dt0h,
   AdmsSensFadType & modelPar_tbvl,
   bool modelPar_given_tbvl,
   AdmsSensFadType & modelPar_tef0,
   bool modelPar_given_tef0,
   AdmsSensFadType & modelPar_gtfe,
   bool modelPar_given_gtfe,
   AdmsSensFadType & modelPar_thcs,
   bool modelPar_given_thcs,
   AdmsSensFadType & modelPar_ahc,
   bool modelPar_given_ahc,
   AdmsSensFadType & modelPar_fthc,
   bool modelPar_given_fthc,
   AdmsSensFadType & modelPar_rci0,
   bool modelPar_given_rci0,
   AdmsSensFadType & modelPar_vlim,
   bool modelPar_given_vlim,
   AdmsSensFadType & modelPar_vces,
   bool modelPar_given_vces,
   AdmsSensFadType & modelPar_vpt,
   bool modelPar_given_vpt,
   AdmsSensFadType & modelPar_aick,
   bool modelPar_given_aick,
   AdmsSensFadType & modelPar_delck,
   bool modelPar_given_delck,
   AdmsSensFadType & modelPar_tr,
   bool modelPar_given_tr,
   AdmsSensFadType & modelPar_vcbar,
   bool modelPar_given_vcbar,
   AdmsSensFadType & modelPar_icbar,
   bool modelPar_given_icbar,
   AdmsSensFadType & modelPar_acbar,
   bool modelPar_given_acbar,
   AdmsSensFadType & modelPar_cbepar,
   bool modelPar_given_cbepar,
   AdmsSensFadType & modelPar_cbcpar,
   bool modelPar_given_cbcpar,
   AdmsSensFadType & modelPar_alqf,
   bool modelPar_given_alqf,
   AdmsSensFadType & modelPar_alit,
   bool modelPar_given_alit,
   AdmsSensFadType & modelPar_kf,
   bool modelPar_given_kf,
   AdmsSensFadType & modelPar_af,
   bool modelPar_given_af,
   AdmsSensFadType & modelPar_kfre,
   bool modelPar_given_kfre,
   AdmsSensFadType & modelPar_afre,
   bool modelPar_given_afre,
   AdmsSensFadType & modelPar_latb,
   bool modelPar_given_latb,
   AdmsSensFadType & modelPar_latl,
   bool modelPar_given_latl,
   AdmsSensFadType & modelPar_vgb,
   bool modelPar_given_vgb,
   AdmsSensFadType & modelPar_alt0,
   bool modelPar_given_alt0,
   AdmsSensFadType & modelPar_kt0,
   bool modelPar_given_kt0,
   AdmsSensFadType & modelPar_zetaci,
   bool modelPar_given_zetaci,
   AdmsSensFadType & modelPar_alvs,
   bool modelPar_given_alvs,
   AdmsSensFadType & modelPar_alces,
   bool modelPar_given_alces,
   AdmsSensFadType & modelPar_zetarbi,
   bool modelPar_given_zetarbi,
   AdmsSensFadType & modelPar_zetarbx,
   bool modelPar_given_zetarbx,
   AdmsSensFadType & modelPar_zetarcx,
   bool modelPar_given_zetarcx,
   AdmsSensFadType & modelPar_zetare,
   bool modelPar_given_zetare,
   AdmsSensFadType & modelPar_zetacx,
   bool modelPar_given_zetacx,
   AdmsSensFadType & modelPar_vge,
   bool modelPar_given_vge,
   AdmsSensFadType & modelPar_vgc,
   bool modelPar_given_vgc,
   AdmsSensFadType & modelPar_vgs,
   bool modelPar_given_vgs,
   AdmsSensFadType & modelPar_f1vg,
   bool modelPar_given_f1vg,
   AdmsSensFadType & modelPar_f2vg,
   bool modelPar_given_f2vg,
   AdmsSensFadType & modelPar_zetact,
   bool modelPar_given_zetact,
   AdmsSensFadType & modelPar_zetabet,
   bool modelPar_given_zetabet,
   AdmsSensFadType & modelPar_alb,
   bool modelPar_given_alb,
   AdmsSensFadType & modelPar_dvgbe,
   bool modelPar_given_dvgbe,
   AdmsSensFadType & modelPar_zetahjei,
   bool modelPar_given_zetahjei,
   AdmsSensFadType & modelPar_zetavgbe,
   bool modelPar_given_zetavgbe,
   AdmsSensFadType & modelPar_rth,
   bool modelPar_given_rth,
   AdmsSensFadType & modelPar_zetarth,
   bool modelPar_given_zetarth,
   AdmsSensFadType & modelPar_alrth,
   bool modelPar_given_alrth,
   AdmsSensFadType & modelPar_cth,
   bool modelPar_given_cth,
   AdmsSensFadType & modelPar_flcomp,
   bool modelPar_given_flcomp,
   AdmsSensFadType & modelPar_tnom,
   bool modelPar_given_tnom,
   AdmsSensFadType & modelPar_dt,
   bool modelPar_given_dt,
   // non-reals (including hidden)
   int modelPar_tunode,
   bool modelPar_given_tunode,
   int modelPar_flnqs,
   bool modelPar_given_flnqs,
   int modelPar_cfbe,
   bool modelPar_given_cfbe,
   int modelPar_flcono,
   bool modelPar_given_flcono,
   int modelPar_flsh,
   bool modelPar_given_flsh,
   int modelPar_type,
   bool modelPar_given_type,
   double admsTemperature, double ADMSgmin_arg, const Instance & theInstance);

#endif // Xyce_ADMS_SENSITIVITIES


// Limited exponential --- NOT what verilog LRM says, but what qucs,
// ng-spice, and zspice do.

template <typename T>
T limexp(const T &x)
{
  if ((x) < 80.0)
    return (exp(x));
  else
    return (exp(80.0)*(x-79.0));
}

// Maybe this will do as a substitute for a sacado-provided "floor" and "ceil"?
// It is wrong to try to propagate the Sacado derivatives to the return
// value, as the floor and ceil functions have zero derivative w.r.t. any
// of the variables in the argument, except when X is an integer at which
// point the derivative is undefined.
template <typename T>
double ADMSfloor(const T & x)
{
  return (floor(x.val()));
}

template <typename T>
double ADMSceil(const T & x)
{
  return (ceil(x.val()));
}


struct Traits: public DeviceTraits<Model, Instance, BJT::Traits>
{
  static const char *name() {return "HICUM v2.4.0";}
  static const char *deviceTypeName() {return "q level 234";}

  static int numNodes() {return 5;}
  static bool modelRequired() {return true;}
  static bool isLinearDevice() {return false;}

  static Device *factory(const Configuration &configuration, const FactoryBlock &factory_block);
  static void loadModelParameters(ParametricData<Model> &model_parameters);
  static void loadInstanceParameters(ParametricData<Instance> &instance_parameters);
};

//-----------------------------------------------------------------------------
// Class         : Instance

//
// Purpose       : This class represents a single instance  of the
//                 device.  It mainly contains indices and pointers into
//                 the matrix equation (see the resistor instance class for
//                 more details).
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Instance : public DeviceInstance
{
  friend class ParametricData<Instance>;
  friend class Model;
#ifdef Xyce_ADMS_SENSITIVITIES
  friend class InstanceSensitivity;
  friend class ModelSensitivity;
#endif // Xyce_ADMS_SENSITIVITIES
  friend struct Traits;

public:
  Instance(
     const Configuration &       configuration,
     const InstanceBlock &       instance_block,
     Model &                     model,
     const FactoryBlock &        factory_block);

  ~Instance();

private:
  Instance(const Instance &);
  Instance &operator=(const Instance &);

public:
  void registerLIDs( const LocalIdVector & intLIDVecRef,
                     const LocalIdVector & extLIDVecRef );
  void registerStoreLIDs( const LocalIdVector & stoLIDVecRef );
  void setupPointers();

  void loadNodeSymbols(Util::SymbolTable &symbol_table) const;

  const JacobianStamp & jacobianStamp() const;
  void registerJacLIDs( const JacobianStamp & jacLIDVec );

  void registerBranchDataLIDs(const std::vector<int> & branchLIDVecRef);

  bool processParams();
  bool updateTemperature ( const double & temp = -999.0 );
  bool updateIntermediateVars ();
  bool updatePrimaryState ();
  bool updateSecondaryState ();

  // load functions, residual:
  bool loadDAEQVector ();
  bool loadDAEFVector ();

  // load functions, Jacobian:
  bool loadDAEdQdx ();
  bool loadDAEdFdx ();

  void collapseNodes();
  int getNumNoiseSources () const;  // 17
  void setupNoiseSources (Xyce::Analysis::NoiseData & noiseData);
  void getNoiseSources (Xyce::Analysis::NoiseData & noiseData);

private:

public:
  // iterator reference to the hicumL2va model which owns this instance.
  // Getters and setters
  Model &getModel()
  {
    return model_;
  }

private:

  Model & model_;   //< Owning Model
  // Begin verilog Instance Variables
  //   Instance Parameters
  //  Variables of global_instance scope
  double VT;
  double d_VT_dV_tnode_GND;
  double Tdev;
  double d_Tdev_dV_tnode_GND;
  double qtt0;
  double d_qtt0_dV_tnode_GND;
  double ln_qtt0;
  double d_ln_qtt0_dV_tnode_GND;
  double r_VgVT;
  double d_r_VgVT_dV_tnode_GND;
  double V_gT;
  double d_V_gT_dV_tnode_GND;
  double dT;
  double d_dT_dV_tnode_GND;
  double k;
  double d_k_dV_tnode_GND;
  double ireis_t;
  double d_ireis_t_dV_tnode_GND;
  double ibeis_t;
  double d_ibeis_t_dV_tnode_GND;
  double ibcxs_t;
  double d_ibcxs_t_dV_tnode_GND;
  double ibcis_t;
  double d_ibcis_t_dV_tnode_GND;
  double iscs_t;
  double d_iscs_t_dV_tnode_GND;
  double cjci0_t;
  double d_cjci0_t_dV_tnode_GND;
  double cjs0_t;
  double d_cjs0_t_dV_tnode_GND;
  double cscp0_t;
  double d_cscp0_t_dV_tnode_GND;
  double rci0_t;
  double d_rci0_t_dV_tnode_GND;
  double vlim_t;
  double d_vlim_t_dV_tnode_GND;
  double vces_t;
  double d_vces_t_dV_tnode_GND;
  double thcs_t;
  double d_thcs_t_dV_tnode_GND;
  double tef0_t;
  double d_tef0_t_dV_tnode_GND;
  double rbi0_t;
  double d_rbi0_t_dV_tnode_GND;
  double t0_t;
  double d_t0_t_dV_tnode_GND;
  double vdei_t;
  double d_vdei_t_dV_tnode_GND;
  double vdci_t;
  double d_vdci_t_dV_tnode_GND;
  double vpts_t;
  double d_vpts_t_dV_tnode_GND;
  double vptsp_t;
  double d_vptsp_t_dV_tnode_GND;
  double itss_t;
  double d_itss_t_dV_tnode_GND;
  double tsf_t;
  double d_tsf_t_dV_tnode_GND;
  double c10_t;
  double d_c10_t_dV_tnode_GND;
  double cjei0_t;
  double d_cjei0_t_dV_tnode_GND;
  double qp0_t;
  double d_qp0_t_dV_tnode_GND;
  double vdcx_t;
  double d_vdcx_t_dV_tnode_GND;
  double vptcx_t;
  double d_vptcx_t_dV_tnode_GND;
  double cjcx01_t;
  double d_cjcx01_t_dV_tnode_GND;
  double cjcx02_t;
  double d_cjcx02_t_dV_tnode_GND;
  double cratio_t;
  double d_cratio_t_dV_tnode_GND;
  double ibeps_t;
  double d_ibeps_t_dV_tnode_GND;
  double ireps_t;
  double d_ireps_t_dV_tnode_GND;
  double cjep0_t;
  double d_cjep0_t_dV_tnode_GND;
  double ajei_t;
  double d_ajei_t_dV_tnode_GND;
  double qavl_t;
  double d_qavl_t_dV_tnode_GND;
  double favl_t;
  double d_favl_t_dV_tnode_GND;
  double kavl_t;
  double d_kavl_t_dV_tnode_GND;
  double ibets_t;
  double d_ibets_t_dV_tnode_GND;
  double abet_t;
  double d_abet_t_dV_tnode_GND;
  double vptci_t;
  double d_vptci_t_dV_tnode_GND;
  double vdep_t;
  double d_vdep_t_dV_tnode_GND;
  double ajep_t;
  double d_ajep_t_dV_tnode_GND;
  double zetatef;
  double k1;
  double d_k1_dV_tnode_GND;
  double k2;
  double d_k2_dV_tnode_GND;
  double dvg0;
  double vge_t;
  double d_vge_t_dV_tnode_GND;
  double vgb_t;
  double d_vgb_t_dV_tnode_GND;
  double vgbe_t;
  double d_vgbe_t_dV_tnode_GND;
  double vds_t;
  double d_vds_t_dV_tnode_GND;
  double vdsp_t;
  double d_vdsp_t_dV_tnode_GND;
  double vt0;
  double Tnom;
  double Tamb;
  double a;
  double d_a_dV_bi_ei;
  double d_a_dV_bi_ci;
  double d_a_dV_tnode_GND;
  double avs;
  double zetabci;
  double zetabcxt;
  double zetasct;
  double vgbe0;
  double mg;
  double vgbe_t0;
  double vgbc0;
  double vgsc0;
  double cbcpar1;
  double cbcpar2;
  double cbepar2;
  double cbepar1;
  double Oich;
  double Otbhrec;
  double it;
  double d_it_dV_tnode_GND;
  double d_it_dV_bi_ei;
  double d_it_dV_bi_ci;
  double ibei;
  double d_ibei_dV_tnode_GND;
  double d_ibei_dV_bi_ei;
  double ibci;
  double d_ibci_dV_tnode_GND;
  double d_ibci_dV_bi_ci;
  double d_ibci_dV_bi_ei;
  double ibep;
  double d_ibep_dV_tnode_GND;
  double d_ibep_dV_bp_ei;
  double d_ibep_dV_bi_ci;
  double d_ibep_dV_bi_ei;
  double iavl;
  double d_iavl_dV_tnode_GND;
  double d_iavl_dV_bi_ei;
  double d_iavl_dV_bi_ci;
  double ijbcx;
  double d_ijbcx_dV_tnode_GND;
  double d_ijbcx_dV_bp_ci;
  double d_ijbcx_dV_bp_ei;
  double d_ijbcx_dV_bi_ci;
  double d_ijbcx_dV_bi_ei;
  double ijsc;
  double d_ijsc_dV_tnode_GND;
  double d_ijsc_dV_si_ci;
  double d_ijsc_dV_bp_ci;
  double d_ijsc_dV_bp_ei;
  double d_ijsc_dV_bi_ci;
  double d_ijsc_dV_bi_ei;
  double rth_t;
  double d_rth_t_dV_tnode_GND;
  double vdj0;
  double vdjt;
  double d_vdjt_dV_tnode_GND;
  double vdt;
  double d_vdt_dV_tnode_GND;
  double Tf;
  double d_Tf_dV_bi_ei;
  double d_Tf_dV_tnode_GND;
  double d_Tf_dV_bi_ci;
  double cjcx01;
  double cjcx02;
  double betadc;
  double d_betadc_dV_tnode_GND;
  double d_betadc_dV_bi_ei;
  double d_betadc_dV_bi_ci;
  double hjei0_t;
  double d_hjei0_t_dV_tnode_GND;
  double ahjei_t;
  double d_ahjei_t_dV_tnode_GND;
  double hf0_t;
  double d_hf0_t_dV_tnode_GND;
  double hfe_t;
  double d_hfe_t_dV_tnode_GND;
  double hfc_t;
  double d_hfc_t_dV_tnode_GND;
  int use_aval;
  double rbx_t;
  double d_rbx_t_dV_tnode_GND;
  double rcx_t;
  double d_rcx_t_dV_tnode_GND;
  double re_t;
  double d_re_t_dV_tnode_GND;
  double rbi;
  double d_rbi_dV_tnode_GND;
  double d_rbi_dV_bi_ei;
  double d_rbi_dV_bi_ci;
  // end verilog Instance Variables=====
  // Nodal LID Variables
  int li_c;
  int li_b;
  int li_e;
  int li_s;
  int li_tnode;
  int li_ci;
  int li_ei;
  int li_bp;
  int li_bi;
  int li_si;
  int li_xf1;
  int li_xf2;
  int li_xf;
  int li_n1;
  int li_n2;
  // end Nodal LID Variables
  // Branch LID Variables
  // end Branch LID Variables
  // Lead (branch) LID Variables
  int li_branch_ic;
  int li_branch_ib;
  int li_branch_ie;
  int li_branch_is;
  int li_branch_itnode;
  // end Lead (branch) LID Variables
  // Jacobian  pointers
  double * f_bi_Equ_bi_Node_Ptr;
  double * f_bi_Equ_ei_Node_Ptr;
  double * f_ei_Equ_bi_Node_Ptr;
  double * f_ei_Equ_ei_Node_Ptr;
  double * f_bi_Equ_ci_Node_Ptr;
  double * f_ci_Equ_bi_Node_Ptr;
  double * f_ci_Equ_ci_Node_Ptr;
  double * f_ci_Equ_ei_Node_Ptr;
  double * f_ei_Equ_ci_Node_Ptr;
  double * f_b_Equ_bi_Node_Ptr;
  double * f_b_Equ_ci_Node_Ptr;
  double * f_b_Equ_tnode_Node_Ptr;
  double * f_ci_Equ_tnode_Node_Ptr;
  double * f_b_Equ_bp_Node_Ptr;
  double * f_ci_Equ_bp_Node_Ptr;
  double * f_b_Equ_b_Node_Ptr;
  double * f_ci_Equ_b_Node_Ptr;
  double * f_b_Equ_ei_Node_Ptr;
  double * f_bp_Equ_bp_Node_Ptr;
  double * f_bp_Equ_ci_Node_Ptr;
  double * f_bp_Equ_tnode_Node_Ptr;
  double * f_bp_Equ_b_Node_Ptr;
  double * f_bp_Equ_bi_Node_Ptr;
  double * f_bp_Equ_ei_Node_Ptr;
  double * f_bi_Equ_tnode_Node_Ptr;
  double * f_bi_Equ_bp_Node_Ptr;
  double * f_ei_Equ_tnode_Node_Ptr;
  double * f_ei_Equ_bp_Node_Ptr;
  double * f_bi_Equ_xf_Node_Ptr;
  double * f_ei_Equ_xf_Node_Ptr;
  double * f_bp_Equ_si_Node_Ptr;
  double * f_si_Equ_si_Node_Ptr;
  double * f_si_Equ_ci_Node_Ptr;
  double * f_si_Equ_bp_Node_Ptr;
  double * f_si_Equ_tnode_Node_Ptr;
  double * f_b_Equ_e_Node_Ptr;
  double * f_e_Equ_b_Node_Ptr;
  double * f_e_Equ_e_Node_Ptr;
  double * f_bp_Equ_e_Node_Ptr;
  double * f_e_Equ_bp_Node_Ptr;
  double * f_si_Equ_bi_Node_Ptr;
  double * f_si_Equ_ei_Node_Ptr;
  double * f_ci_Equ_si_Node_Ptr;
  double * f_si_Equ_b_Node_Ptr;
  double * f_s_Equ_bi_Node_Ptr;
  double * f_s_Equ_ci_Node_Ptr;
  double * f_c_Equ_bi_Node_Ptr;
  double * f_c_Equ_ci_Node_Ptr;
  double * f_s_Equ_tnode_Node_Ptr;
  double * f_c_Equ_tnode_Node_Ptr;
  double * f_s_Equ_bp_Node_Ptr;
  double * f_c_Equ_bp_Node_Ptr;
  double * f_s_Equ_b_Node_Ptr;
  double * f_c_Equ_b_Node_Ptr;
  double * f_s_Equ_si_Node_Ptr;
  double * f_c_Equ_si_Node_Ptr;
  double * f_s_Equ_s_Node_Ptr;
  double * f_s_Equ_c_Node_Ptr;
  double * f_c_Equ_s_Node_Ptr;
  double * f_c_Equ_c_Node_Ptr;
  double * f_s_Equ_ei_Node_Ptr;
  double * f_c_Equ_ei_Node_Ptr;
  double * f_ci_Equ_xf2_Node_Ptr;
  double * f_ei_Equ_xf2_Node_Ptr;
  double * f_ci_Equ_c_Node_Ptr;
  double * f_e_Equ_tnode_Node_Ptr;
  double * f_ei_Equ_e_Node_Ptr;
  double * f_e_Equ_ei_Node_Ptr;
  double * f_si_Equ_s_Node_Ptr;
  double * f_tnode_Equ_tnode_Node_Ptr;
  double * f_tnode_Equ_bi_Node_Ptr;
  double * f_tnode_Equ_ci_Node_Ptr;
  double * f_tnode_Equ_ei_Node_Ptr;
  double * f_tnode_Equ_si_Node_Ptr;
  double * f_tnode_Equ_bp_Node_Ptr;
  double * f_tnode_Equ_e_Node_Ptr;
  double * f_tnode_Equ_c_Node_Ptr;
  double * f_tnode_Equ_b_Node_Ptr;
  double * f_xf1_Equ_bi_Node_Ptr;
  double * f_xf1_Equ_ci_Node_Ptr;
  double * f_xf1_Equ_ei_Node_Ptr;
  double * f_xf1_Equ_tnode_Node_Ptr;
  double * f_xf1_Equ_xf2_Node_Ptr;
  double * f_xf1_Equ_xf1_Node_Ptr;
  double * f_xf2_Equ_bi_Node_Ptr;
  double * f_xf2_Equ_ci_Node_Ptr;
  double * f_xf2_Equ_tnode_Node_Ptr;
  double * f_xf2_Equ_ei_Node_Ptr;
  double * f_xf2_Equ_xf1_Node_Ptr;
  double * f_xf2_Equ_xf2_Node_Ptr;
  double * f_xf_Equ_bi_Node_Ptr;
  double * f_xf_Equ_ei_Node_Ptr;
  double * f_xf_Equ_ci_Node_Ptr;
  double * f_xf_Equ_tnode_Node_Ptr;
  double * f_xf_Equ_xf_Node_Ptr;
  double * f_e_Equ_bi_Node_Ptr;
  double * f_e_Equ_ci_Node_Ptr;
  double * f_n1_Equ_bi_Node_Ptr;
  double * f_n1_Equ_ei_Node_Ptr;
  double * f_n1_Equ_tnode_Node_Ptr;
  double * f_n1_Equ_n1_Node_Ptr;
  double * f_bi_Equ_n1_Node_Ptr;
  double * f_ei_Equ_n1_Node_Ptr;
  double * f_bi_Equ_n2_Node_Ptr;
  double * f_ei_Equ_n2_Node_Ptr;
  double * f_n2_Equ_bi_Node_Ptr;
  double * f_n2_Equ_ci_Node_Ptr;
  double * f_n2_Equ_ei_Node_Ptr;
  double * f_n2_Equ_tnode_Node_Ptr;
  double * f_n2_Equ_n2_Node_Ptr;
  double * f_ci_Equ_n2_Node_Ptr;
  double * q_bi_Equ_bi_Node_Ptr;
  double * q_bi_Equ_ei_Node_Ptr;
  double * q_ei_Equ_bi_Node_Ptr;
  double * q_ei_Equ_ei_Node_Ptr;
  double * q_bi_Equ_ci_Node_Ptr;
  double * q_ci_Equ_bi_Node_Ptr;
  double * q_ci_Equ_ci_Node_Ptr;
  double * q_ci_Equ_ei_Node_Ptr;
  double * q_ei_Equ_ci_Node_Ptr;
  double * q_b_Equ_bi_Node_Ptr;
  double * q_b_Equ_ci_Node_Ptr;
  double * q_b_Equ_tnode_Node_Ptr;
  double * q_ci_Equ_tnode_Node_Ptr;
  double * q_b_Equ_bp_Node_Ptr;
  double * q_ci_Equ_bp_Node_Ptr;
  double * q_b_Equ_b_Node_Ptr;
  double * q_ci_Equ_b_Node_Ptr;
  double * q_b_Equ_ei_Node_Ptr;
  double * q_bp_Equ_bp_Node_Ptr;
  double * q_bp_Equ_ci_Node_Ptr;
  double * q_bp_Equ_tnode_Node_Ptr;
  double * q_bp_Equ_b_Node_Ptr;
  double * q_bp_Equ_bi_Node_Ptr;
  double * q_bp_Equ_ei_Node_Ptr;
  double * q_bi_Equ_tnode_Node_Ptr;
  double * q_bi_Equ_bp_Node_Ptr;
  double * q_ei_Equ_tnode_Node_Ptr;
  double * q_ei_Equ_bp_Node_Ptr;
  double * q_bi_Equ_xf_Node_Ptr;
  double * q_ei_Equ_xf_Node_Ptr;
  double * q_bp_Equ_si_Node_Ptr;
  double * q_si_Equ_si_Node_Ptr;
  double * q_si_Equ_ci_Node_Ptr;
  double * q_si_Equ_bp_Node_Ptr;
  double * q_si_Equ_tnode_Node_Ptr;
  double * q_b_Equ_e_Node_Ptr;
  double * q_e_Equ_b_Node_Ptr;
  double * q_e_Equ_e_Node_Ptr;
  double * q_bp_Equ_e_Node_Ptr;
  double * q_e_Equ_bp_Node_Ptr;
  double * q_si_Equ_bi_Node_Ptr;
  double * q_si_Equ_ei_Node_Ptr;
  double * q_ci_Equ_si_Node_Ptr;
  double * q_si_Equ_b_Node_Ptr;
  double * q_s_Equ_bi_Node_Ptr;
  double * q_s_Equ_ci_Node_Ptr;
  double * q_c_Equ_bi_Node_Ptr;
  double * q_c_Equ_ci_Node_Ptr;
  double * q_s_Equ_tnode_Node_Ptr;
  double * q_c_Equ_tnode_Node_Ptr;
  double * q_s_Equ_bp_Node_Ptr;
  double * q_c_Equ_bp_Node_Ptr;
  double * q_s_Equ_b_Node_Ptr;
  double * q_c_Equ_b_Node_Ptr;
  double * q_s_Equ_si_Node_Ptr;
  double * q_c_Equ_si_Node_Ptr;
  double * q_s_Equ_s_Node_Ptr;
  double * q_s_Equ_c_Node_Ptr;
  double * q_c_Equ_s_Node_Ptr;
  double * q_c_Equ_c_Node_Ptr;
  double * q_s_Equ_ei_Node_Ptr;
  double * q_c_Equ_ei_Node_Ptr;
  double * q_ci_Equ_xf2_Node_Ptr;
  double * q_ei_Equ_xf2_Node_Ptr;
  double * q_ci_Equ_c_Node_Ptr;
  double * q_e_Equ_tnode_Node_Ptr;
  double * q_ei_Equ_e_Node_Ptr;
  double * q_e_Equ_ei_Node_Ptr;
  double * q_si_Equ_s_Node_Ptr;
  double * q_tnode_Equ_tnode_Node_Ptr;
  double * q_tnode_Equ_bi_Node_Ptr;
  double * q_tnode_Equ_ci_Node_Ptr;
  double * q_tnode_Equ_ei_Node_Ptr;
  double * q_tnode_Equ_si_Node_Ptr;
  double * q_tnode_Equ_bp_Node_Ptr;
  double * q_tnode_Equ_e_Node_Ptr;
  double * q_tnode_Equ_c_Node_Ptr;
  double * q_tnode_Equ_b_Node_Ptr;
  double * q_xf1_Equ_bi_Node_Ptr;
  double * q_xf1_Equ_ci_Node_Ptr;
  double * q_xf1_Equ_ei_Node_Ptr;
  double * q_xf1_Equ_tnode_Node_Ptr;
  double * q_xf1_Equ_xf2_Node_Ptr;
  double * q_xf1_Equ_xf1_Node_Ptr;
  double * q_xf2_Equ_bi_Node_Ptr;
  double * q_xf2_Equ_ci_Node_Ptr;
  double * q_xf2_Equ_tnode_Node_Ptr;
  double * q_xf2_Equ_ei_Node_Ptr;
  double * q_xf2_Equ_xf1_Node_Ptr;
  double * q_xf2_Equ_xf2_Node_Ptr;
  double * q_xf_Equ_bi_Node_Ptr;
  double * q_xf_Equ_ei_Node_Ptr;
  double * q_xf_Equ_ci_Node_Ptr;
  double * q_xf_Equ_tnode_Node_Ptr;
  double * q_xf_Equ_xf_Node_Ptr;
  double * q_e_Equ_bi_Node_Ptr;
  double * q_e_Equ_ci_Node_Ptr;
  double * q_n1_Equ_bi_Node_Ptr;
  double * q_n1_Equ_ei_Node_Ptr;
  double * q_n1_Equ_tnode_Node_Ptr;
  double * q_n1_Equ_n1_Node_Ptr;
  double * q_bi_Equ_n1_Node_Ptr;
  double * q_ei_Equ_n1_Node_Ptr;
  double * q_bi_Equ_n2_Node_Ptr;
  double * q_ei_Equ_n2_Node_Ptr;
  double * q_n2_Equ_bi_Node_Ptr;
  double * q_n2_Equ_ci_Node_Ptr;
  double * q_n2_Equ_ei_Node_Ptr;
  double * q_n2_Equ_tnode_Node_Ptr;
  double * q_n2_Equ_n2_Node_Ptr;
  double * q_ci_Equ_n2_Node_Ptr;
  // Jacobian offsets
  int A_bi_Equ_bi_NodeOffset;
  int A_bi_Equ_ei_NodeOffset;
  int A_ei_Equ_bi_NodeOffset;
  int A_ei_Equ_ei_NodeOffset;
  int A_bi_Equ_ci_NodeOffset;
  int A_ci_Equ_bi_NodeOffset;
  int A_ci_Equ_ci_NodeOffset;
  int A_ci_Equ_ei_NodeOffset;
  int A_ei_Equ_ci_NodeOffset;
  int A_b_Equ_bi_NodeOffset;
  int A_b_Equ_ci_NodeOffset;
  int A_b_Equ_tnode_NodeOffset;
  int A_ci_Equ_tnode_NodeOffset;
  int A_b_Equ_bp_NodeOffset;
  int A_ci_Equ_bp_NodeOffset;
  int A_b_Equ_b_NodeOffset;
  int A_ci_Equ_b_NodeOffset;
  int A_b_Equ_ei_NodeOffset;
  int A_bp_Equ_bp_NodeOffset;
  int A_bp_Equ_ci_NodeOffset;
  int A_bp_Equ_tnode_NodeOffset;
  int A_bp_Equ_b_NodeOffset;
  int A_bp_Equ_bi_NodeOffset;
  int A_bp_Equ_ei_NodeOffset;
  int A_bi_Equ_tnode_NodeOffset;
  int A_bi_Equ_bp_NodeOffset;
  int A_ei_Equ_tnode_NodeOffset;
  int A_ei_Equ_bp_NodeOffset;
  int A_bi_Equ_xf_NodeOffset;
  int A_ei_Equ_xf_NodeOffset;
  int A_bp_Equ_si_NodeOffset;
  int A_si_Equ_si_NodeOffset;
  int A_si_Equ_ci_NodeOffset;
  int A_si_Equ_bp_NodeOffset;
  int A_si_Equ_tnode_NodeOffset;
  int A_b_Equ_e_NodeOffset;
  int A_e_Equ_b_NodeOffset;
  int A_e_Equ_e_NodeOffset;
  int A_bp_Equ_e_NodeOffset;
  int A_e_Equ_bp_NodeOffset;
  int A_si_Equ_bi_NodeOffset;
  int A_si_Equ_ei_NodeOffset;
  int A_ci_Equ_si_NodeOffset;
  int A_si_Equ_b_NodeOffset;
  int A_s_Equ_bi_NodeOffset;
  int A_s_Equ_ci_NodeOffset;
  int A_c_Equ_bi_NodeOffset;
  int A_c_Equ_ci_NodeOffset;
  int A_s_Equ_tnode_NodeOffset;
  int A_c_Equ_tnode_NodeOffset;
  int A_s_Equ_bp_NodeOffset;
  int A_c_Equ_bp_NodeOffset;
  int A_s_Equ_b_NodeOffset;
  int A_c_Equ_b_NodeOffset;
  int A_s_Equ_si_NodeOffset;
  int A_c_Equ_si_NodeOffset;
  int A_s_Equ_s_NodeOffset;
  int A_s_Equ_c_NodeOffset;
  int A_c_Equ_s_NodeOffset;
  int A_c_Equ_c_NodeOffset;
  int A_s_Equ_ei_NodeOffset;
  int A_c_Equ_ei_NodeOffset;
  int A_ci_Equ_xf2_NodeOffset;
  int A_ei_Equ_xf2_NodeOffset;
  int A_ci_Equ_c_NodeOffset;
  int A_e_Equ_tnode_NodeOffset;
  int A_ei_Equ_e_NodeOffset;
  int A_e_Equ_ei_NodeOffset;
  int A_si_Equ_s_NodeOffset;
  int A_tnode_Equ_tnode_NodeOffset;
  int A_tnode_Equ_bi_NodeOffset;
  int A_tnode_Equ_ci_NodeOffset;
  int A_tnode_Equ_ei_NodeOffset;
  int A_tnode_Equ_si_NodeOffset;
  int A_tnode_Equ_bp_NodeOffset;
  int A_tnode_Equ_e_NodeOffset;
  int A_tnode_Equ_c_NodeOffset;
  int A_tnode_Equ_b_NodeOffset;
  int A_xf1_Equ_bi_NodeOffset;
  int A_xf1_Equ_ci_NodeOffset;
  int A_xf1_Equ_ei_NodeOffset;
  int A_xf1_Equ_tnode_NodeOffset;
  int A_xf1_Equ_xf2_NodeOffset;
  int A_xf1_Equ_xf1_NodeOffset;
  int A_xf2_Equ_bi_NodeOffset;
  int A_xf2_Equ_ci_NodeOffset;
  int A_xf2_Equ_tnode_NodeOffset;
  int A_xf2_Equ_ei_NodeOffset;
  int A_xf2_Equ_xf1_NodeOffset;
  int A_xf2_Equ_xf2_NodeOffset;
  int A_xf_Equ_bi_NodeOffset;
  int A_xf_Equ_ei_NodeOffset;
  int A_xf_Equ_ci_NodeOffset;
  int A_xf_Equ_tnode_NodeOffset;
  int A_xf_Equ_xf_NodeOffset;
  int A_e_Equ_bi_NodeOffset;
  int A_e_Equ_ci_NodeOffset;
  int A_n1_Equ_bi_NodeOffset;
  int A_n1_Equ_ei_NodeOffset;
  int A_n1_Equ_tnode_NodeOffset;
  int A_n1_Equ_n1_NodeOffset;
  int A_bi_Equ_n1_NodeOffset;
  int A_ei_Equ_n1_NodeOffset;
  int A_bi_Equ_n2_NodeOffset;
  int A_ei_Equ_n2_NodeOffset;
  int A_n2_Equ_bi_NodeOffset;
  int A_n2_Equ_ci_NodeOffset;
  int A_n2_Equ_ei_NodeOffset;
  int A_n2_Equ_tnode_NodeOffset;
  int A_n2_Equ_n2_NodeOffset;
  int A_ci_Equ_n2_NodeOffset;
  // end of Jacobian and pointers
  // node numbers
  static const int admsNodeID_c = 0;
  static const int admsNodeID_b = 1;
  static const int admsNodeID_e = 2;
  static const int admsNodeID_s = 3;
  static const int admsNodeID_tnode = 4;
  static const int admsNodeID_ci = 5;
  static const int admsNodeID_ei = 6;
  static const int admsNodeID_bp = 7;
  static const int admsNodeID_bi = 8;
  static const int admsNodeID_si = 9;
  static const int admsNodeID_xf1 = 10;
  static const int admsNodeID_xf2 = 11;
  static const int admsNodeID_xf = 12;
  static const int admsNodeID_n1 = 13;
  static const int admsNodeID_n2 = 14;
  static const int admsNodeID_GND = -1;
  // end node numbers
  // Additional IDs for branch equations
  // end branch numbers
  // Probe numbers
  static const int admsProbeID_V_n2_GND = 0;
  static const int admsProbeID_V_n1_GND = 1;
  static const int admsProbeID_V_si_s = 2;
  static const int admsProbeID_V_bp_e = 3;
  static const int admsProbeID_V_b_e = 4;
  static const int admsProbeID_V_ci_ei = 5;
  static const int admsProbeID_V_xf_GND = 6;
  static const int admsProbeID_V_xf2_GND = 7;
  static const int admsProbeID_V_xf1_GND = 8;
  static const int admsProbeID_V_b_bp = 9;
  static const int admsProbeID_V_ci_c = 10;
  static const int admsProbeID_V_ei_e = 11;
  static const int admsProbeID_V_bp_bi = 12;
  static const int admsProbeID_V_tnode_GND = 13;
  static const int admsProbeID_V_s_c = 14;
  static const int admsProbeID_V_si_ci = 15;
  static const int admsProbeID_V_b_ci = 16;
  static const int admsProbeID_V_bp_ci = 17;
  static const int admsProbeID_V_bp_ei = 18;
  static const int admsProbeID_V_bi_ci = 19;
  static const int admsProbeID_V_bi_ei = 20;
  // end probe numbers
  // Store LIDs
  // end store LIDs
  // bools for collapsing nodes
  bool collapseNode_ci;
  bool collapseNode_ei;
  bool collapseNode_bp;
  bool collapseNode_bi;
  bool collapseNode_si;
  // Arrays to hold probes
  std::vector < double > probeVars;
  std::vector < std::vector < double > > d_probeVars;
  // Arrays to hold contributions
  // dynamic contributions are differentiated w.r.t time
  std::vector < double > staticContributions;
  std::vector < std::vector < double > > d_staticContributions;
  std::vector < double > dynamicContributions;
  std::vector < std::vector < double > > d_dynamicContributions;
  //vectors to hold noise information for communication between methods
  std::vector<double> noiseContribsPower;
  std::vector<double> noiseContribsExponent;


  // this is what we'll use when any model uses $temperature.  We'll
  // set it in updateTemperature, and initialize it to whatever
  // is in devOptions when the instance is constructed.
  double admsTemperature;

  // vt at $temperature;
  double adms_vt_nom;


  // This one is for the annoying bogus "XyceADMSInstTemp" parameter
  // that we need so we can set it from the device manager when there's no
  // "TEMP" parameter to use
  double admsInstTemp;


  JacobianStamp jacStamp;
  IdVector nodeMap;
  PairMap pairToJacStampMap;

  // These instance-owned vectors are for storage of lead current data
  std::vector<double> leadCurrentF;
  std::vector<double> leadCurrentQ;
};


//-----------------------------------------------------------------------------
// Class         : Model

// Purpose       :
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Model : public DeviceModel
{
  typedef std::vector<Instance *> InstanceVector;

  friend class ParametricData<Model>;
  friend class Instance;
#ifdef Xyce_ADMS_SENSITIVITIES
  friend class InstanceSensitivity;
  friend class ModelSensitivity;
#endif // Xyce_ADMS_SENSITIVITIES
  friend struct Traits;

public:
  Model(
     const Configuration &       configuration,
     const ModelBlock &          model_block,
     const FactoryBlock &        factory_block);

  ~Model();

private:
  Model(const Model &);
  Model &operator=(const Model &);

public:
  virtual void forEachInstance(DeviceInstanceOp &op) const /* override */;
  virtual std::ostream &printOutInstances(std::ostream &os) const;
  bool processParams();
  bool processInstanceParams();

private:

public:
  void addInstance(Instance *instance)
  {
    instanceContainer.push_back(instance);
  }

  void setupBaseInstanceContainer()
  {
    std::vector<Instance*>::iterator iter = instanceContainer.begin();
    std::vector<Instance*>::iterator end   = instanceContainer.end();
    for ( ; iter!=end; ++iter)
    {
      Xyce::Device::DeviceModel::baseInstanceContainer.push_back( static_cast<Xyce::Device::DeviceInstance *>(*iter) );
    }
  }

private:
  std::vector<Instance*> instanceContainer;

private:

  // This one is for the annoying bogus "XyceADMSInstTemp" parameter
  // that we need so we can set it from the device manager when there's no
  // "TEMP" model parameter to use
  double admsModTemp;
  // Begin verilog Model Variables
  //   Model Parameters
  double c10;
  double qp0;
  double ich;
  double hf0;
  double hfe;
  double hfc;
  double hjei;
  double ahjei;
  double rhjei;
  double hjci;
  double ibeis;
  double mbei;
  double ireis;
  double mrei;
  double ibeps;
  double mbep;
  double ireps;
  double mrep;
  double mcf;
  double tbhrec;
  double ibcis;
  double mbci;
  double ibcxs;
  double mbcx;
  double ibets;
  double abet;
  int tunode;
  double favl;
  double qavl;
  double kavl;
  double alfav;
  double alqav;
  double alkav;
  double rbi0;
  double rbx;
  double fgeo;
  double fdqr0;
  double fcrbi;
  double fqi;
  double re;
  double rcx;
  double itss;
  double msf;
  double iscs;
  double msc;
  double tsf;
  double rsu;
  double csu;
  double cjei0;
  double vdei;
  double zei;
  double ajei;
  double cjep0;
  double vdep;
  double zep;
  double ajep;
  double cjci0;
  double vdci;
  double zci;
  double vptci;
  double cjcx0;
  double vdcx;
  double zcx;
  double vptcx;
  double fbcpar;
  double fbepar;
  double cjs0;
  double vds;
  double zs;
  double vpts;
  double cscp0;
  double vdsp;
  double zsp;
  double vptsp;
  double t0;
  double dt0h;
  double tbvl;
  double tef0;
  double gtfe;
  double thcs;
  double ahc;
  double fthc;
  double rci0;
  double vlim;
  double vces;
  double vpt;
  double aick;
  double delck;
  double tr;
  double vcbar;
  double icbar;
  double acbar;
  double cbepar;
  double cbcpar;
  double alqf;
  double alit;
  int flnqs;
  double kf;
  double af;
  int cfbe;
  int flcono;
  double kfre;
  double afre;
  double latb;
  double latl;
  double vgb;
  double alt0;
  double kt0;
  double zetaci;
  double alvs;
  double alces;
  double zetarbi;
  double zetarbx;
  double zetarcx;
  double zetare;
  double zetacx;
  double vge;
  double vgc;
  double vgs;
  double f1vg;
  double f2vg;
  double zetact;
  double zetabet;
  double alb;
  double dvgbe;
  double zetahjei;
  double zetavgbe;
  int flsh;
  double rth;
  double zetarth;
  double alrth;
  double cth;
  double flcomp;
  double tnom;
  double dt;
  int type;
  //  Variables of global_model scope
  // end verilog model variables=====
};

void registerDevice(const DeviceCountMap& deviceMap = DeviceCountMap(),
                    const std::set<int>& levelSet = std::set<int>());

} // namespace ADMShicumL2va
} // namespace Device
} // namespace Xyce
#endif //Xyce_N_DEV_ADMShicumL2va_h
